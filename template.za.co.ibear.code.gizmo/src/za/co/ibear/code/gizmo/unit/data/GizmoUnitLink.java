package za.co.ibear.code.gizmo.unit.data;

import za.co.ibear.code.data.dictionary.system.sequence.UnitSequence;
import za.co.ibear.code.data.dictionary.system.unit.Unit;
import za.co.ibear.code.gizmo.GizmoUnit;

public class GizmoUnitLink extends GizmoUnit {

	public GizmoUnitLink(Unit unit) throws Exception {
		super(unit,unit.NAME + "Link",unit.NAME + "Model",GizmoUnitDataConstant.PACKAGE_PREFIX,GizmoUnitDataConstant.PATH_PREFIX);
		
		/**
		 * Check for hard coded strings e.g. search and replace (P)(p)roduct. + " + unit.SCHEMA + " ??  >> (P)(p)roductCategory << 
		 * 
		 * " + unit.NAME.toLowerCase() + "
		 * " + unit.NAME + "
		 * " + unit.SCHEMA + "
		 *  
		 */

		content = content + "import java.util.HashMap;\n";
		content = content + "import java.lang.reflect.Constructor;\n";
		content = content + "import java.lang.reflect.Method;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.unit.Unit;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.primary.key.PrimaryKey;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.field.Field;\n";
		content = content + "import java.sql.ResultSet;\n";
		content = content + "import java.util.List;\n";
		content = content + "import java.util.ArrayList;\n";
		content = content + "import gk.jfilter.JFilter;\n";
		content = content + "import java.util.Arrays;\n";
		content = content + "import java.util.Calendar;\n";
		content = content + "import java.util.Date;\n";
		content = content + "import java.util.LinkedHashSet;\n";
		content = content + "import java.util.Map;\n";
		content = content + "import java.util.Map.Entry;\n";
		content = content + "import java.util.Set;\n";
		content = content + "import java.util.TreeSet;\n";
		content = content + "import org.apache.commons.dbutils.QueryRunner;\n";
		content = content + "import org.apache.commons.dbutils.handlers.BeanListHandler;\n";
		content = content + "import za.co.ibear.property.model.PropertyModel;\n";
		content = content + "import za.co.ibear.swt.control.combo.BCombo;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.database.DatabaseConstant;\n";
		content = content + "import za.co.ibear.lib.jdbc.sqlite.SqliteJdbc;\n";
		content = content + "public class " + unit.NAME + "Link extends PropertyModel {\n";
		content = content + "	\n";
		content = content + "	private SqliteJdbc database" + unit.NAME + "Link = null;\n";
		content = content + "	\n";
		content = content + "	private List<" + unit.NAME + "Model> data = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "	private List<" + unit.NAME + "Model> filterData = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "	private Set<BCombo> multiSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	private Set<BCombo> unitSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	private Set<BCombo> querySet = new LinkedHashSet<BCombo>();\n";
		content = content + "	private Set<BCombo> dateSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	\n";
		content = content + "	protected JFilter<" + unit.NAME + "Model> filter;\n";
		content = content + "	\n";
		content = content + "	public " + unit.NAME + "Link() throws Exception {\n";
		content = content + "		try {\n";
		content = content + "			database" + unit.NAME + "Link = new SqliteJdbc(DatabaseConstant.DB_CONNECTION);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			e.printStackTrace();\n";
		content = content + "			throw e;\n";
		content = content + "		} \n";
		content = content + "	}\n";
		content = content + "	public void disconnect() {\n";
		content = content + "		try {\n";
		content = content + "			database" + unit.NAME + "Link.disconnect();\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public List<" + unit.NAME + "Model> pop() throws Exception {\n";
		content = content + "		String query = select * from " + unit.SCHEMA + ".\\" + unit.NAME + "\\ order by \\" + unit.NAME + "\\;\n";
		content = content + "		QueryRunner qr = new QueryRunner();\n";
		content = content + "		setData((List<" + unit.NAME + "Model>) qr.query(database" + unit.NAME + "Link.getConnection(),query,new BeanListHandler<" + unit.NAME + "Model>(" + unit.NAME + "Model.class)));\n";
		content = content + "		return getData();\n";
		content = content + "	}\n";
		content = content + "	public List<" + unit.NAME + "Model> to" + unit.NAME + "ModelList(String where) throws Exception {\n";
		content = content + "		String query = select * from " + unit.SCHEMA + ".\\" + unit.NAME + "\\;\n";
		content = content + "		if(where!=null) {\n";
		content = content + "			query = query + where;\n";
		content = content + "		}\n";
		content = content + "		query = query +  order by \\" + unit.NAME + "\\;\n";
		content = content + "		QueryRunner qr = new QueryRunner();\n";
		content = content + "		setData((List<" + unit.NAME + "Model>) qr.query(database" + unit.NAME + "Link.getConnection(),query,new BeanListHandler<" + unit.NAME + "Model>(" + unit.NAME + "Model.class)));\n";
		content = content + "		return getData();\n";
		content = content + "	}\n";
		content = content + "	public void stringSearch(String searchString) {\n";
		content = content + "		Class<" + unit.NAME + "Model> model = " + unit.NAME + "Model.class;\n";
		content = content + "		Method[] methods = model.getDeclaredMethods();\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		List<" + unit.NAME + "Model> resultSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		String[] values = searchString.split( );\n";
		content = content + "		for(String value:values) {\n";
		content = content + "			if(value.trim().length()>0) {\n";
		content = content + "				for (Method method : methods) {\n";
		content = content + "					if(method.getReturnType().getSimpleName().equals(String)) {\n";
		content = content + "						if(method.getName().startsWith(get)) {\n";
		content = content + "							tempSet.addAll(filter.filter({' + method.getName() + ':{'$cts':'?1'}},value.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "						}\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				resultSet = tempSet;\n";
		content = content + "				filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "				tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "				filtered=true;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		if(filtered) {\n";
		content = content + "			setFilterData(resultSet);\n";
		content = content + "		} else {\n";
		content = content + "			setFilterData(data);\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			try {\n";
		content = content + "				reduceBComboItems(bcombo);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		reduceUnitBrowse();\n";
		content = content + "	}\n";
		content = content + "	public void filter(String column,List<String> values) {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		List<" + unit.NAME + "Model> resultSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		if(values.size()>0) {\n";
		content = content + "			for(String value:values) {\n";
		content = content + "				tempSet.addAll(filter.filter({'get + column.trim() + ':{'trim':'?1'}},value.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "			}\n";
		content = content + "			resultSet = tempSet;\n";
		content = content + "			filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "			tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "			filtered=true;\n";
		content = content + "		}\n";
		content = content + "		if(filtered) {\n";
		content = content + "			setData(resultSet);\n";
		content = content + "		} else {\n";
		content = content + "			setData(data);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public List<" + unit.NAME + "Model> to" + unit.NAME + "ModelList(String where,Map<String,List<String>> initFilter) throws Exception {\n";
		content = content + "		String query = select * from " + unit.SCHEMA + ".\\" + unit.NAME + "\\ order by \\" + unit.NAME + "\\;\n";
		content = content + "		if(where!=null) {\n";
		content = content + "			query = query + where;\n";
		content = content + "		}\n";
		content = content + "		QueryRunner qr = new QueryRunner();\n";
		content = content + "		initFilter(initFilter,(List<" + unit.NAME + "Model>) qr.query(database" + unit.NAME + "Link.getConnection(),query,new BeanListHandler<" + unit.NAME + "Model>(" + unit.NAME + "Model.class)));\n";
		content = content + "		return getData();\n";
		content = content + "	}\n";
		content = content + "	public void initFilter(Map<String,List<String>> initFilter,List<" + unit.NAME + "Model> allData) {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(allData, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		List<" + unit.NAME + "Model> resultSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		for(Entry<String,List<String>> column:initFilter.entrySet()) {\n";
		content = content + "			String columnName = column.getKey().trim();\n";
		content = content + "			List<String> values = column.getValue();\n";
		content = content + "			if(values.size()>0) {\n";
		content = content + "				for(String value:values) {\n";
		content = content + "					tempSet.addAll(filter.filter({'get + columnName.trim() + ':{'trim':'?1'}},value.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "				}\n";
		content = content + "				resultSet = tempSet;\n";
		content = content + "				filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "				tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "				filtered=true;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		if(filtered) {\n";
		content = content + "			setData(resultSet);\n";
		content = content + "		} else {\n";
		content = content + "			setData(data);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "	public List<String> toDistinctColumnArray(String column) throws Exception {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		Set<String> itemTree = new TreeSet<String>();\n";
		content = content + "		itemTree.addAll(filter.filter({'$not':[{'get + column + ':{'$sw':'?1'}}]}, _iBear_).map(column).out(new TreeSet()));\n";
		content = content + "		return new ArrayList<String>(Arrays.asList(itemTree.toArray(new String[itemTree.size()])));\n";
		content = content + "	}\n";
		content = content + "	@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "	public List<String> toDistinctColumnArray(String column,String whereColumn,String whereValue) throws Exception {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		Set<String> itemTree = new TreeSet<String>();\n";
		content = content + "		itemTree.addAll(filter.filter({'get + whereColumn + ':{'$eq':'?1'}}, whereValue).map(column).out(new TreeSet()));\n";
		content = content + "		return new ArrayList<String>(Arrays.asList(itemTree.toArray(new String[itemTree.size()])));\n";
		content = content + "	}\n";
		content = content + "	@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "	public Set<String> toDistinctFilterSet(String column) throws Exception {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(filterData, " + unit.NAME + "Model.class);\n";
		content = content + "		Set<String> itemTree = new TreeSet<String>();\n";
		content = content + "		try {\n";
		content = content + "			itemTree.addAll(filter.filter({'$not':[{'get + column + ':{'$sw':'?1'}}]}, _iBear_).map(column).out(new TreeSet()));\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "		return itemTree;\n";
		content = content + "	}\n";
		content = content + "	\n";
		
		if(unit.IS_ELEMENT) {
			content = content + "	public void doDeleteElement(" + unit.NAME + "Model unit,boolean isFiltered) throws Exception {\n";
			content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
			content = content + "		setData(filter.filter({'$not':[{'getElementSequence':{'$eq':'?1'}}]}, unit.getElementSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
			content = content + "		if(isFiltered) {\n";
			content = content + "			filter = new JFilter<" + unit.NAME + "Model>(filterData, " + unit.NAME + "Model.class);\n";
			content = content + "			setFilterData(filter.filter({'$not':[{'getElementSequence':{'$eq':'?1'}}]}, unit.getElementSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
			content = content + "		}\n";
			content = content + "	}\n";
		}

		content = content + "	public void doDelete(" + unit.NAME + "Model unit,boolean isFiltered) throws Exception {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		setData(filter.filter({'$not':[{'getUnitSequence':{'$eq':'?1'}}]}, unit.getUnitSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "		if(isFiltered) {\n";
		content = content + "			filter = new JFilter<" + unit.NAME + "Model>(filterData, " + unit.NAME + "Model.class);\n";
		content = content + "			setFilterData(filter.filter({'$not':[{'getUnitSequence':{'$eq':'?1'}}]}, unit.getUnitSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "	public void reduceBComboItems(BCombo bcombo) throws Exception {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(filterData, " + unit.NAME + "Model.class);\n";
		content = content + "		Set<String> itemTree = new TreeSet<String>();\n";
		content = content + "		itemTree.addAll(filter.filter({'$not':[{'get + bcombo.getColumnName() + ':{'$sw':'?1'}}]}, _iBear_).map(bcombo.getColumnName()).out(new TreeSet()));\n";
		content = content + "		bcombo.setItems(new ArrayList<String>(Arrays.asList(itemTree.toArray(new String[itemTree.size()]))));\n";
		content = content + "	}\n";
		content = content + "	public void doQuery(String column, List<String> queryItems) {\n";
		content = content + "		if(queryItems==null) {\n";
		content = content + "			setFilterData(data);\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		if(queryItems.size()<1) {\n";
		content = content + "			setFilterData(data);\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		for(String selected:queryItems) {\n";
		content = content + "			tempSet.addAll(filter.filter({'get + column + ':{'trim':'?1'}},selected.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "		}\n";
		content = content + "		setFilterData(tempSet);\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			try {\n";
		content = content + "				reduceBComboItems(bcombo);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		reduceUnitBrowse();\n";
		content = content + "	}\n";
		content = content + "	public void doSelect() {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		List<" + unit.NAME + "Model> resultSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			if(bcombo.getSelection().size()>0) {\n";
		content = content + "				for(String selected:bcombo.getSelection()) {\n";
		content = content + "					tempSet.addAll(filter.filter({'get + bcombo.getColumnName() + ':{'trim':'?1'}},selected.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "				}\n";
		content = content + "				resultSet = tempSet;\n";
		content = content + "				filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "				tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "				filtered=true;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:unitSet) {\n";
		content = content + "			if(bcombo.getBrowseSelection().size()>0) {\n";
		content = content + "				for(Entry<String, TreeSet<String>> selection:bcombo.getBrowseSelection().entrySet()) {\n";
		content = content + "					String columnName = selection.getKey();\n";
		content = content + "					TreeSet<String> columnData = selection.getValue();\n";
		content = content + "					if(columnData.size()>0) {\n";
		content = content + "						for(String data:columnData) {\n";
		content = content + "							tempSet.addAll(filter.filter({'get + columnName.trim() + ':{'trim':'?1'}},data.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "						}\n";
		content = content + "						resultSet = tempSet;\n";
		content = content + "						filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "						tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "						filtered=true;\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:dateSet) {\n";
		content = content + "			if(bcombo.getDatedDialog().getSelection().size()>0) {\n";
		content = content + "				Date from = bcombo.getDatedDialog().getSelection().get(from);\n";
		content = content + "				Date to = bcombo.getDatedDialog().getSelection().get(to);\n";
		content = content + "				String query = ;\n";
		content = content + "				if(bcombo.getDatedDialog().getSelection().get(from).compareTo(bcombo.getDatedDialog().getSelection().get(to))==0) {\n";
		content = content + "					Calendar calculator = Calendar.getInstance();\n";
		content = content + "					calculator.setTime(to);\n";
		content = content + "					calculator.add(Calendar.DATE,1);\n";
		content = content + "					to = calculator.getTime();\n";
		content = content + "					query = {'$and':[{'get + bcombo.getColumnName() + ':{'$ge':'?1'}}, {'get + bcombo.getColumnName() + ':{'$lt':'?2'}}]};\n";
		content = content + "				} else {\n";
		content = content + "					query= {'$and':[{'get + bcombo.getColumnName() + ':{'$ge':'?1'}}, {'get + bcombo.getColumnName() + ':{'$le':'?2'}}]};\n";
		content = content + "				}\n";
		content = content + "				tempSet.addAll(filter.filter(query,from,to).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "				resultSet = tempSet;\n";
		content = content + "				filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "				tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "				filtered=true;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		if(filtered) {\n";
		content = content + "			setFilterData(resultSet);\n";
		content = content + "		} else {\n";
		content = content + "			setFilterData(data);\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			try {\n";
		content = content + "				reduceBComboItems(bcombo);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		reduceUnitBrowse();\n";
		content = content + "	}\n";
		content = content + "	public void reduceUnitBrowse() {\n";
		content = content + "		for(BCombo bcombo:unitSet) {\n";
		content = content + "			Map<String,TreeSet<String>> selection = new HashMap<String,TreeSet<String>>();\n";
		content = content + "			String name = za.co.ibear.code.data.dictionary.definition.unit. + bcombo.getColumnName();\n";
		content = content + "			try {\n";
		content = content + "				@SuppressWarnings(rawtypes)\n";
		content = content + "				Class meta = Class.forName(name);\n";
		content = content + "				@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "				Constructor constructor = meta.getConstructor();\n";
		content = content + "				Unit unitMeta = (Unit) constructor.newInstance();\n";
		content = content + "				Set<PrimaryKey> keySet = unitMeta.PRIMARY_KEY;\n";
		content = content + "				for(PrimaryKey pk:keySet) {\n";
		content = content + "					for(Field field:pk.FIELD) {\n";
		content = content + "						selection.put(field.getName(), (TreeSet<String>) toDistinctFilterSet(field.getName()));\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				bcombo.setBrowseSelection(selection);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	\n";
		content = content + "	public void doReduceUnitBrowse(Map<String,TreeSet<String>> selection) {\n";
		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "		List<" + unit.NAME + "Model> tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		List<" + unit.NAME + "Model> resultSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		if(selection.size()>0) {\n";
		content = content + "			for(Entry<String, TreeSet<String>> entry:selection.entrySet()) {\n";
		content = content + "				String columnName = entry.getKey();\n";
		content = content + "				TreeSet<String> columnData = entry.getValue();\n";
		content = content + "				if(columnData.size()>0) {\n";
		content = content + "					for(String data:columnData) {\n";
		content = content + "						tempSet.addAll(filter.filter({'get + columnName.trim() + ':{'trim':'?1'}},data.trim()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
		content = content + "					}\n";
		content = content + "					resultSet = tempSet;\n";
		content = content + "					filter = new JFilter<" + unit.NAME + "Model>(resultSet, " + unit.NAME + "Model.class);\n";
		content = content + "					tempSet = new ArrayList<" + unit.NAME + "Model>();\n";
		content = content + "					filtered=true;\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		if(filtered) {\n";
		content = content + "			setFilterData(resultSet);\n";
		content = content + "		} else {\n";
		content = content + "			setFilterData(data);\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			try {\n";
		content = content + "				reduceBComboItems(bcombo);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public void doReset() {\n";
		content = content + "		setFilterData(data);\n";
		content = content + "		for(BCombo bcombo:multiSet) {\n";
		content = content + "			bcombo.setAllSelected();\n";
		content = content + "			try {\n";
		content = content + "				reduceBComboItems(bcombo);\n";
		content = content + "			} catch (Exception e) {\n";
		content = content + "				e.printStackTrace();\n";
		content = content + "			}\n";
		content = content + "			bcombo.getIndicator().setText(> );\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:unitSet) {\n";
		content = content + "			bcombo.crearState();\n";
		content = content + "			bcombo.clearUnitBrowse();\n";
		content = content + "			bcombo.getIndicator().setText(> );\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:querySet) {\n";
		content = content + "			bcombo.crearState();\n";
		content = content + "			bcombo.clearUnitBrowse();\n";
		content = content + "			bcombo.getIndicator().setText(> );\n";
		content = content + "		}\n";
		content = content + "		for(BCombo bcombo:dateSet) {\n";
		content = content + "			bcombo.getDatedDialog().clear();\n";
		content = content + "			bcombo.getIndicator().setText(> );\n";
		content = content + "		}\n";
		content = content + "		expandUnitBrowse();\n";
		content = content + "	}\n";
		content = content + "	public void expandUnitBrowse() {\n";
		content = content + "		for(BCombo bcombo:unitSet) {\n";
		content = content + "			Map<String,TreeSet<String>> selection = new HashMap<String,TreeSet<String>>();\n";
		content = content + "			bcombo.setBrowseSelection(selection);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public void doExpandUnitBrowse() {\n";
		content = content + "		setFilterData(data);\n";
		content = content + "	}\n";
		content = content + "	public List<" + unit.NAME + "Model> getData() {\n";
		content = content + "		return data;\n";
		content = content + "	}\n";
		content = content + "	public void setData(List<" + unit.NAME + "Model> data) {\n";
		content = content + "		firePropertyChange(data, this.data, this.data = data);\n";
		content = content + "	}\n";
		content = content + "	public List<" + unit.NAME + "Model> getFilterData() {\n";
		content = content + "		return filterData;\n";
		content = content + "	}\n";
		content = content + "	public void setFilterData(List<" + unit.NAME + "Model> filterData) {\n";
		content = content + "		this.filterData = filterData;\n";
		content = content + "	}\n";
		content = content + "	public Set<BCombo> getMultiSet() {\n";
		content = content + "		return multiSet;\n";
		content = content + "	}\n";
		content = content + "	public void setMultiSet(Set<BCombo> filterSet) {\n";
		content = content + "		this.multiSet = filterSet;\n";
		content = content + "	}\n";
		content = content + "	public Set<BCombo> getUnitSet() {\n";
		content = content + "		return unitSet;\n";
		content = content + "	}\n";
		content = content + "	public void setUnitSet(Set<BCombo> unitSet) {\n";
		content = content + "		this.unitSet = unitSet;\n";
		content = content + "	}\n";
		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :) + v);\n";
		content = content + "	}\n";
		content = content + "	public Set<BCombo> getDateSet() {\n";
		content = content + "		return dateSet;\n";
		content = content + "	}\n";
		content = content + "	public void setDateSet(Set<BCombo> dateSet) {\n";
		content = content + "		this.dateSet = dateSet;\n";
		content = content + "	}\n";
		content = content + "	public void setQuerySet(Set<BCombo> querySet) {\n";
		content = content + "		this.querySet = querySet;\n";
		content = content + "	}\n";
		content = content + "	public int nextUnitSequence() throws Exception {\n";
		content = content + "		SqliteJdbc nextConnect;\n";
		content = content + "		int next = 0;\n";
		content = content + "		try {\n";
		content = content + "			nextConnect = new SqliteJdbc(DatabaseConstant.DB_CONNECTION);\n";
		content = content + "			nextConnect.update(BEGIN);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			throw e;\n";
		content = content + "		}\n";
		content = content + "		try {\n";
		content = content + "			nextConnect.update(SAVEPOINT next_product_sequence);\n";

		UnitSequence e = new UnitSequence();
		
		content = content + "			ResultSet rsNext = nextConnect.result(select * from " + e.SCHEMA + ".\\UnitSequence\\ where \\UnitName\\ = '" + unit.NAME + "');\n";
		content = content + "			if(rsNext.next()) {\n";
		content = content + "				next = rsNext.getInt(NextSequence);\n";
		content = content + "			}\n";
		content = content + "			rsNext.close();\n";
		content = content + "			next++;\n";
		content = content + "			nextConnect.update(update " + e.SCHEMA + ".\\UnitSequence\\ set \\NextSequence\\ =  + next +  where \\UnitName\\ = '" + unit.NAME + "');\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			nextConnect.update(ROLLBACK TO next_" + unit.NAME.toLowerCase() + "_sequence);\n";
		content = content + "			throw e;\n";
		content = content + "		}\n";
		content = content + "		nextConnect.update(COMMIT);\n";
		content = content + "		nextConnect.disconnect();\n";
		content = content + "		return next;\n";
		content = content + "	}\n";
		content = content + "	public int nextElementSequence() throws Exception {\n";
		content = content + "		int next = 0;\n";
		content = content + "		\n";
		content = content + "		try {\n";
		content = content + "			filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
		content = content + "			next = filter.<Integer> map(ElementSequence).max()+1;\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "		return next;\n";
		content = content + "	}\n";
		content = content + "}\n";

		createFile();		

	}

//	if(unit.IS_ELEMENT) {
//		content = content + "	public void doDeleteElement(" + unit.NAME + "Model unit,boolean isFiltered) throws Exception {\n";
//		content = content + "		filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
//		content = content + "		setData(filter.filter({'$not':[{'getElementSequence':{'$eq':'?1'}}]}, unit.getElementSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
//		content = content + "		if(isFiltered) {\n";
//		content = content + "			filter = new JFilter<" + unit.NAME + "Model>(filterData, " + unit.NAME + "Model.class);\n";
//		content = content + "			setFilterData(filter.filter({'$not':[{'getElementSequence':{'$eq':'?1'}}]}, unit.getElementSequence()).out(new ArrayList<" + unit.NAME + "Model>()));\n";
//		content = content + "		}\n";
//		content = content + "	}\n";
//	}
//
//	content = content + "	public void doDelete(" + unit.NAME + "Model unit,boolean isFiltered) throws Exception {\n";

//	content = content + "			ResultSet rsNext = nextConnect.result(select * from " + e.SCHEMA + ".\\UnitSequence\\ where \\UnitName\\ = '" + unit.NAME + "');\n";
//	content = content + "			if(rsNext.next()) {\n";
//	content = content + "				next = rsNext.getInt(NextSequence);\n";
//	content = content + "			}\n";
//	content = content + "			rsNext.close();\n";
//	content = content + "			next++;\n";
//	content = content + "			nextConnect.update(update " + e.SCHEMA + ".\\UnitSequence\\ set \\NextSequence\\ =  + next +  where \\UnitName\\ = '" + unit.NAME + "');\n";
//	content = content + "		} catch (Exception e) {\n";
//	content = content + "			nextConnect.update(ROLLBACK TO next_" + unit.NAME.toLowerCase() + "_sequence);\n";
//	content = content + "			throw e;\n";
//	content = content + "		}\n";
//	content = content + "		nextConnect.update(COMMIT);\n";
//	content = content + "		nextConnect.disconnect();\n";
//	content = content + "		return next;\n";
//	content = content + "	}\n";
//	content = content + "	public int nextElementSequence() throws Exception {\n";
//	content = content + "		int next = 0;\n";
//	content = content + "		\n";
//	content = content + "		try {\n";
//	content = content + "			filter = new JFilter<" + unit.NAME + "Model>(data, " + unit.NAME + "Model.class);\n";
//	content = content + "			next = filter.<Integer> map(ElementSequence).max()+1;\n";
//	content = content + "		} catch (Exception e) {\n";
//	content = content + "		}\n";
//	content = content + "		return next + 1;\n";
//	content = content + "	}\n";
//	content = content + "}\n";

}
