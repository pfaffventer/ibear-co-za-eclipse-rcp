package za.co.ibear.code.gizmo.unit.swt;

import za.co.ibear.code.data.dictionary.system.unit.Unit;
import za.co.ibear.code.gizmo.GizmoUnit;

public class GizmoUnitEdit extends GizmoUnit {
	
	public GizmoUnitEdit(Unit unit) throws Exception {
		super(unit,unit.NAME + "Edit",unit.NAME + "Model",GizmoUnitEditorConstant.PACKAGE_PREFIX,GizmoUnitEditorConstant.PATH_PREFIX);
		
		/**
		 * Check for hard coded strings e.g. search and replace (P)(p)roduct.
		 * 
		 * " + unit.NAME.toLowerCase() + "
		 * " + unit.NAME + "
		 *  
		 */


		content = content + "import java.beans.PropertyChangeEvent;\n";
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseCombo;\n";
		content = content + "import java.beans.PropertyChangeListener;\n";
		content = content + "import java.beans.PropertyChangeSupport;\n";
		content = content + "import java.lang.reflect.Method;\n";
		content = content + "import java.util.ArrayList;\n";
		content = content + "import java.util.HashMap;\n";
		content = content + "import java.util.List;\n";
		content = content + "import java.util.Map;\n";
		content = content + "import org.eclipse.swt.widgets.Composite;\n";
		content = content + "import org.eclipse.swt.widgets.Control;\n";
		content = content + "import org.eclipse.swt.widgets.Event;\n";
		content = content + "import org.eclipse.swt.widgets.Label;\n";
		content = content + "import org.eclipse.swt.widgets.Listener;\n";
		content = content + "import org.eclipse.swt.widgets.TableColumn;\n";
		content = content + "import org.eclipse.swt.widgets.TableItem;\n";
		content = content + "import org.eclipse.swt.SWT;\n";
		content = content + "import org.eclipse.swt.custom.TableEditor;\n";
		content = content + "import org.eclipse.swt.events.FocusEvent;\n";
		content = content + "import org.eclipse.swt.events.FocusListener;\n";
		content = content + "import org.eclipse.swt.events.KeyAdapter;\n";
		content = content + "import org.eclipse.swt.events.KeyEvent;\n";
		content = content + "import org.eclipse.swt.graphics.Color;\n";
		content = content + "import org.eclipse.swt.graphics.Font;\n";
//		content = content + "import org.eclipse.swt.graphics.GC;\n";
		content = content + "import org.eclipse.swt.graphics.Image;\n";
		content = content + "import org.eclipse.swt.layout.GridLayout;\n";
		content = content + "import org.eclipse.swt.widgets.Text;\n";
		content = content + "import org.eclipse.swt.layout.GridData;\n";
		content = content + "import org.eclipse.swt.widgets.Table;\n";
		content = content + "import org.eclipse.wb.swt.SWTResourceManager;\n";
		content = content + "import org.eclipse.core.databinding.DataBindingContext;\n";
		content = content + "import org.eclipse.core.databinding.beans.PojoProperties;\n";
		content = content + "import org.eclipse.core.databinding.observable.value.IObservableValue;\n";
		content = content + "import org.eclipse.jface.databinding.swt.WidgetProperties;\n";
		content = content + "import org.eclipse.jface.viewers.ArrayContentProvider;\n";
		content = content + "import org.eclipse.jface.viewers.ColumnLabelProvider;\n";
		content = content + "import org.eclipse.jface.viewers.ISelectionChangedListener;\n";
		content = content + "import org.eclipse.jface.viewers.SelectionChangedEvent;\n";
		content = content + "import org.eclipse.jface.viewers.TableViewer;\n";
		content = content + "import org.eclipse.jface.viewers.TableViewerColumn;\n";
		content = content + "import org.eclipse.jface.viewers.Viewer;\n";
		content = content + "import org.eclipse.jface.viewers.ViewerComparator;\n";
		content = content + "import org.eclipse.jface.viewers.ViewerFilter;\n";
		content = content + "import za.co.ibear.code.data.dictionary.definition.unit." + unit.NAME + ";\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.edit.EditConstant;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.edit.UnitEditor;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.unit.Unit;\n";
		content = content + "import za.co.ibear.data.unit." + unit.NAME.toLowerCase() + "." + unit.NAME + "Model;\n";

		content = content + "//import za.co.ibear.data.unit.swt.edit.EditCombo;\n";

		content = content + "import za.co.ibear.data.unit.swt.edit.UnitEditCombo;\n";

		content = content + "import za.co.ibear.swt.control.combo.BCombo;\n";
		content = content + "import za.co.ibear.swt.control.combo.BComboConstant;\n";
		content = content + "import za.co.ibear.swt.control.table.ColumnTool;\n";
		content = content + "import org.eclipse.swt.widgets.Button;\n";
		content = content + "import org.eclipse.wb.swt.ResourceManager;\n";
		content = content + "import org.eclipse.swt.events.MouseAdapter;\n";
		content = content + "import org.eclipse.swt.events.MouseEvent;\n";
		content = content + "import org.eclipse.swt.layout.FillLayout;\n";
		content = content + "import org.eclipse.swt.custom.CTabFolder;\n";
		content = content + "import org.eclipse.swt.widgets.Display;\n";
		content = content + "import org.eclipse.swt.custom.CTabItem;\n";
		content = content + "public class " + unit.NAME + "Edit extends Composite {\n";
		content = content + "	private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);\n";
		content = content + "	private Image addIcon = ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/add.png);\n";
		content = content + "	private Image deleteIcon = ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/cross.png);\n";
		content = content + "	private Composite container;\n";
		content = content + "	private CTabFolder folder;\n";
		content = content + "	private CTabItem " + unit.NAME.toLowerCase() + "Tab;\n";
		content = content + "	private Composite " + unit.NAME.toLowerCase() + "Composite;\n";
		content = content + "	private Text search;\n";
		content = content + "	private TableViewer viewer;\n";
		content = content + "	private Table table;\n";
		content = content + "	private " + unit.NAME + " meta = new " + unit.NAME + "();\n";
		content = content + "	private List<UnitEditor> editorData = null;\n";
		content = content + "	private " + unit.NAME + "Model editModel = null;\n";
		content = content + "	private TableColumn editorColumn;\n";
		content = content + "	private DataBindingContext ctx = null;\n";
		content = content + "	private Map<String, BCombo> comboMap = new HashMap<String, BCombo>();\n";

		content = content + "	int labelWidth = 200;\n";

		content = content + "	public " + unit.NAME + "Edit(Composite parent, int style, int labelWidth) throws Exception {\n";
		content = content + "		super(parent, style);\n";

		content = content + "		this.labelWidth = labelWidth;;\n";

		content = content + "		GridLayout gridLayout = new GridLayout(1, false);\n";
		content = content + "		gridLayout.verticalSpacing = 3;\n";
		content = content + "		gridLayout.marginWidth = 3;\n";
		content = content + "		gridLayout.marginHeight = 3;\n";
		content = content + "		gridLayout.horizontalSpacing = 3;\n";
		content = content + "		setLayout(gridLayout);\n";
		content = content + "		container = new Composite(this, SWT.NONE);\n";
		content = content + "		container.setLayout(new FillLayout(SWT.HORIZONTAL));\n";
		content = content + "		container.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		container.addListener(SWT.Resize, new Listener() {\n";
		content = content + "			public void handleEvent(Event event) {\n";
		content = content + "				if (editorColumn != null) {\n";
		content = content + "					editorWidth();\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		folder = new CTabFolder(container, SWT.BORDER | SWT.BOTTOM);\n";
		content = content + "		folder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Tab = new CTabItem(folder, SWT.NONE);\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Tab.setText(" + unit.NAME + ");\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Composite = new Composite(folder, SWT.NONE);\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Tab.setControl(" + unit.NAME.toLowerCase() + "Composite);\n";
		content = content + "		GridLayout gl_" + unit.NAME.toLowerCase() + "Composite = new GridLayout(3, false);\n";
		content = content + "		gl_" + unit.NAME.toLowerCase() + "Composite.verticalSpacing = 3;\n";
		content = content + "		gl_" + unit.NAME.toLowerCase() + "Composite.marginWidth = 0;\n";
		content = content + "		gl_" + unit.NAME.toLowerCase() + "Composite.marginHeight = 0;\n";
		content = content + "		gl_" + unit.NAME.toLowerCase() + "Composite.horizontalSpacing = 3;\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Composite.setLayout(gl_" + unit.NAME.toLowerCase() + "Composite);\n";
		content = content + "		search = new Text(" + unit.NAME.toLowerCase() + "Composite, SWT.SEARCH | SWT.ICON_SEARCH | SWT.CANCEL | SWT.BORDER);\n";
		content = content + "		search.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n";
		content = content + "		search.setToolTipText(Enter filter text);\n";
		content = content + "		search.setMessage(Search);\n";
		content = content + "		Button add = new Button(" + unit.NAME.toLowerCase() + "Composite, SWT.NONE);\n";

		content = content + "		if(meta.IS_READ_ONLY) {\n";
		content = content + "			add.setEnabled(false);\n";
		content = content + "		}\n";
		
		content = content + "		add.setImage(addIcon);\n";
		content = content + "		add.setToolTipText(Add record);\n";
		content = content + "		add.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDown(MouseEvent e) {\n";
		content = content + "				addRecord();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		Button delete = new Button(" + unit.NAME.toLowerCase() + "Composite, SWT.NONE);\n";
		
		content = content + "		if(meta.IS_READ_ONLY) {\n";
		content = content + "			delete.setEnabled(false);\n";
		content = content + "		}\n";
		
		content = content + "		delete.setImage(deleteIcon);\n";
		content = content + "		delete.setToolTipText(Delete record);\n";
		content = content + "		delete.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDown(MouseEvent e) {\n";
		content = content + "				deleteRecord();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		viewer = new TableViewer(" + unit.NAME.toLowerCase() + "Composite, SWT.BORDER);\n";
		content = content + "		viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n";
		content = content + "			@Override\n";
		content = content + "			public void selectionChanged(final SelectionChangedEvent event) {\n";
		content = content + "				if (!event.getSelection().isEmpty()) {\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		viewer.setContentProvider(new ArrayContentProvider());\n";
		content = content + "		table = viewer.getTable();\n";
//		content = content + "		table.addListener(SWT.EraseItem, new Listener() {\n";**
//		content = content + "			public void handleEvent(Event event) {\n";
//		content = content + "				event.detail &= ~SWT.HOT;\n";
//		content = content + "				if ((event.detail & SWT.SELECTED) == 0)\n";
//		content = content + "					return; // / item not selected\n";
//		content = content + "				GC gc = event.gc;\n";
//		content = content + "				Color oldForeground = gc.getForeground();\n";
//		content = content + "				Color oldBackground = gc.getBackground();\n";
//		content = content + "				gc.setForeground(oldForeground);\n";
//		content = content + "				gc.setBackground(oldBackground);\n";
//		content = content + "				event.detail &= ~SWT.SELECTED;\n";
//		content = content + "			}\n";
//		content = content + "		});\n";
		content = content + "		table.setLinesVisible(true);\n";
		content = content + "		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 5, 1));\n";
		content = content + "		createLabelColumn();\n";
		content = content + "		table.pack();\n";
		content = content + "		try {\n";
		content = content + "			Method setItemHeightMethod = table.getClass().getDeclaredMethod(setItemHeight, int.class);\n";
		content = content + "			setItemHeightMethod.setAccessible(true);\n";
		content = content + "			setItemHeightMethod.invoke(table, 27);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "		editorData = new ArrayList<UnitEditor>(meta.EDITOR);\n";
		content = content + "		viewer.setInput(editorData);\n";
		content = content + "		createEditors(null);\n";
		content = content + "		final " + unit.NAME + "EditFilter rowFilter = new " + unit.NAME + "EditFilter();\n";
		content = content + "		viewer.addFilter(rowFilter);\n";
		content = content + "		search.addKeyListener(new KeyAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void keyReleased(KeyEvent e) {\n";
		content = content + "				destroyEditors();\n";
		content = content + "				rowFilter.setSearchText(search.getText());\n";
		content = content + "				viewer.refresh();\n";
		content = content + "				try {\n";
		content = content + "					createEditors(null);\n";
		content = content + "				} catch (Exception e1) {\n";
		content = content + "					e1.printStackTrace();\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		folder.setSelection(0);\n";
		content = content + "		table.setFocus();\n";
		content = content + "	}\n";
		content = content + "	public void addRecord() {\n";
		content = content + "		firePropertyChange(add-record, STATIC, NEW-RECORD);\n";
		content = content + "	}\n";
		content = content + "	public void deleteRecord() {\n";
		content = content + "		firePropertyChange(delete-record, STATIC, DELETE-RECORD);\n";
		content = content + "	}\n";
		content = content + "	public Object createEditor(final UnitEditor editor) throws Exception {\n";
		content = content + "		String propertyName = editor.getField().getName().substring(0, 1).toLowerCase() + editor.getField().getName().substring(1, editor.getField().getName().length());\n";
		content = content + "		TableEditor tableEditor = new TableEditor(table);\n";
		content = content + "		tableEditor.grabHorizontal = true;\n";
		content = content + "		tableEditor.grabVertical = true;\n";
		content = content + "		tableEditor.horizontalAlignment = SWT.FILL;\n";
		content = content + "		tableEditor.verticalAlignment = SWT.FILL;\n";
		content = content + "		switch (editor.getEditor()) {\n";
		content = content + "		case EditConstant.TEXT:\n";
		content = content + "			Text rt = new Text(table, SWT.BORDER);\n";
		content = content + "			rt.addKeyListener(new KeyAdapter() {\n";
		content = content + "				@Override\n";
		content = content + "				public void keyReleased(KeyEvent e) {\n";
		content = content + "					firePropertyChange(do-edit, STATIC, TYPING-NOW);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "			IObservableValue text_target = WidgetProperties.text(SWT.Modify).observe(rt);\n";
		content = content + "			IObservableValue text_model = PojoProperties.value(propertyName).observe(editModel);\n";
		content = content + "			ctx.bindValue(text_target, text_model);\n";
		content = content + "			rt.setEditable(!editor.isReadOnly());\n";
		content = content + "			return rt;\n";
		content = content + "		case EditConstant.COMBO:\n";
		content = content + "			Text rc = new Text(table, SWT.BORDER);\n";
		content = content + "			rc.setEditable(!editor.isReadOnly());\n";
		content = content + "			return rc;\n";
		content = content + "		case EditConstant.CCOMBO:\n";
		content = content + "			Text rcc = new Text(table, SWT.BORDER);\n";
		content = content + "			rcc.setEditable(!editor.isReadOnly());\n";
		content = content + "			return rcc;\n";
		content = content + "		case EditConstant.DATE_TIME:\n";
		content = content + "			Text rcd = new Text(table, SWT.BORDER);\n";
		content = content + "			rcd.setEditable(!editor.isReadOnly());\n";
		content = content + "			return rcd;\n";
		content = content + "		case EditConstant.BCOMBO_SINGLE:\n";
		content = content + "			BCombo bcombo_single = null;\n";
		content = content + "			if (comboMap.containsKey(editor.getField().getName())) {\n";
		content = content + "				bcombo_single = new BCombo(table, 370, editor.getField().getName(), editor.getField().getDescription(), comboMap.get(editor.getField().getName()).getItems(), BComboConstant.SINGLE);\n";
		content = content + "			} else {\n";
		content = content + "				bcombo_single = new BCombo(table, 370, editor.getField().getName(), editor.getField().getDescription(), getUnitComboData(editor.getUnit(),editor.getField().getName()), BComboConstant.SINGLE);\n";
		content = content + "				comboMap.put(editor.getField().getName(), bcombo_single);\n";
		content = content + "			}\n";
		content = content + "			bcombo_single.addPropertyChangeListener(do-refresh, new PropertyChangeListener() {\n";
		content = content + "				public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "					Method setProperty;\n";
		content = content + "					try {\n";
		content = content + "						setProperty = editModel.getClass().getDeclaredMethod(set + editor.getField().getName(), String.class);\n";
		content = content + "						setProperty.setAccessible(true);\n";
		content = content + "						setProperty.invoke(editModel, ((Label) e.getNewValue()).getText());\n";
		content = content + "					} catch (Exception e1) {\n";
		content = content + "						e1.printStackTrace();\n";
		content = content + "					}\n";
		content = content + "					firePropertyChange(do-edit, STATIC, TYPING-NOW);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "			IObservableValue bcombo_single_target = WidgetProperties.text().observe(bcombo_single.getLabel());\n";
		content = content + "			IObservableValue bcombo_single_model = PojoProperties.value(propertyName).observe(editModel);\n";
		content = content + "			ctx.bindValue(bcombo_single_target, bcombo_single_model);\n";
		content = content + "			return bcombo_single;\n";
		content = content + "		case EditConstant.UNIT_EDIT:\n";
		content = content + "			UnitEditCombo edit_combo = new UnitEditCombo(table,970,editor.getField().getDescription(),editor.getField().getName());\n";
		content = content + "			edit_combo.addPropertyChangeListener(do-refresh, new PropertyChangeListener() {\n";
		content = content + "				public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "					Method getProperty;\n";
		content = content + "					Method setProperty;\n";
		content = content + "					for(String columnName:editor.getReturnSet()) {\n";
		content = content + "						try {\n";
		content = content + "							getProperty = e.getNewValue().getClass().getDeclaredMethod(get + columnName);\n";
		content = content + "							getProperty.setAccessible(true);\n";
		content = content + "							setProperty = editModel.getClass().getDeclaredMethod(set + columnName, String.class);\n";
		content = content + "							setProperty.setAccessible(true);\n";
		content = content + "							setProperty.invoke(editModel, (String) getProperty.invoke(e.getNewValue()));\n";
		content = content + "						} catch (Exception e1) {\n";
		content = content + "							//FIXME\n";
		content = content + "							e1.printStackTrace();\n";
		content = content + "						}\n";
		content = content + "					}\n";
		content = content + "					firePropertyChange(do-edit, STATIC, UNIT-SELECTED);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "			IObservableValue unit_edit_target = WidgetProperties.text().observe(edit_combo.getLabel());\n";
		content = content + "			IObservableValue unit_edit_model = PojoProperties.value(propertyName).observe(editModel);\n";
		content = content + "			ctx.bindValue(unit_edit_target, unit_edit_model);\n";
		content = content + "			return edit_combo;\n";

		content = content + "		case EditConstant.QUERY:\n";
		content = content + "			UnitBrowseCombo categrory_query = new UnitBrowseCombo(table,1110,editor.getField().getDescription(),editor.getField().getName(),true,null,false);\n";
		content = content + "			categrory_query.addPropertyChangeListener(do-refresh, new PropertyChangeListener() {\n";
		content = content + "				public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "					Method getProperty;\n";
		content = content + "					Method setProperty;\n";
		content = content + "					for(String columnName:editor.getReturnSet()) {\n";
		content = content + "						try {\n";
		content = content + "							getProperty = e.getNewValue().getClass().getDeclaredMethod(get + columnName);\n";
		content = content + "							getProperty.setAccessible(true);\n";
		content = content + "							setProperty = editModel.getClass().getDeclaredMethod(set + columnName, String.class);\n";
		content = content + "							setProperty.setAccessible(true);\n";
		content = content + "							setProperty.invoke(editModel, (String) getProperty.invoke(e.getNewValue()));\n";
		content = content + "						} catch (Exception e1) {\n";
		content = content + "							//FIXME\n";
		content = content + "							e1.printStackTrace();\n";
		content = content + "						}\n";
		content = content + "					}\n";
		content = content + "					firePropertyChange(do-edit, STATIC, UNIT-SELECTED);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "			String p_name = (String) editor.getReturnSet().toArray()[0];\n";
		content = content + "			propertyName = p_name.substring(0, 1).toLowerCase() + p_name.substring(1, p_name.length());\n";

		content = content + "			\n";
		content = content + "			IObservableValue unit_query_target = WidgetProperties.text().observe(categrory_query.getLabel());\n";
		content = content + "			IObservableValue unit_query_model = PojoProperties.value(propertyName).observe(editModel);\n";
		content = content + "			ctx.bindValue(unit_query_target, unit_query_model);\n";
		content = content + "			\n";
		content = content + "			return	categrory_query;\n";

		content = content + "		default:\n";
		content = content + "			break;\n";
		content = content + "		}\n";
		content = content + "		return null;\n";
		content = content + "	}\n";
		content = content + "	@SuppressWarnings({ rawtypes, unchecked })\n";
		content = content + "	private List<String> getUnitComboData(Unit unit, String columnName) throws Exception {\n";
		content = content + "		List<String> c_data = null;\n";
		content = content + "		String name = za.co.ibear.data.unit. + unit.NAME.toLowerCase() + . + unit.NAME.trim() + Link;\n";
		content = content + "		Class unitLink = Class.forName(name);\n";
		content = content + "		java.lang.reflect.Constructor constructor = unitLink.getConstructor();\n";
		content = content + "		Object invoker = constructor.newInstance();\n";
		content = content + "		java.lang.reflect.Method methodPop = unitLink.getMethod(pop);\n";
		content = content + "		java.lang.reflect.Method methodToDistinctColumnArray = unitLink.getMethod(toDistinctColumnArray, String.class);\n";
		content = content + "		java.lang.reflect.Method methodDisconnect = unitLink.getMethod(disconnect);\n";
		content = content + "		methodPop.invoke(invoker);\n";
		content = content + "		c_data = (List<String>) methodToDistinctColumnArray.invoke(invoker, columnName);\n";
		content = content + "		methodDisconnect.invoke(invoker);\n";
		content = content + "		return c_data;\n";
		content = content + "	}\n";
		content = content + "	public void destroyEditors() {\n";
		content = content + "		table.setRedraw(false);\n";
		content = content + "		if (editorColumn != null) {\n";
		content = content + "			editorColumn.dispose();\n";
		content = content + "		}\n";
		content = content + "		for (Control c : table.getChildren()) {\n";
		content = content + "			c.dispose();\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :)  + v);\n";
		content = content + "	}\n";
		content = content + "	public void createEditors(" + unit.NAME + "Model data) throws Exception {\n";
		content = content + "		if (data != null) {\n";
		content = content + "			this.editModel = data;\n";
		content = content + "		} else {\n";
		content = content + "			this.ctx = new DataBindingContext();\n";
		content = content + "		}\n";
		content = content + "		editorColumn = new TableColumn(table, SWT.NONE);\n";
		content = content + "		editorWidth();\n";
		content = content + "		TableEditor tableEditor;\n";
		content = content + "		int row = 0;\n";
		content = content + "		for (TableItem i : table.getItems()) {\n";
		content = content + "			// FIXME all types of editors e.g. BCombo etc.\n";
		content = content + "			UnitEditor editor = getEditorFromDescription(i.getText().substring(0, i.getText().length() - 2));\n";
		content = content + "			tableEditor = new TableEditor(table);\n";
		content = content + "			tableEditor.grabHorizontal = true;\n";
		content = content + "			tableEditor.grabVertical = true;\n";
		content = content + "			tableEditor.horizontalAlignment = SWT.FILL;\n";
		content = content + "			tableEditor.verticalAlignment = SWT.FILL;\n";
		content = content + "			switch (editor.getEditor()) {\n";
		content = content + "			case EditConstant.TEXT:\n";
		content = content + "				final Text text = (Text) createEditor(editor);\n";
		content = content + "				tableEditor.setEditor(text, table.getItem(row), 1);\n";
		content = content + "				FocusListener focusListener = new FocusListener() {\n";
		content = content + "					@Override\n";
		content = content + "					public void focusGained(FocusEvent e) {\n";
		content = content + "						text.setSelection(0);\n";
		content = content + "					}\n";
		content = content + "					@Override\n";
		content = content + "					public void focusLost(FocusEvent e) {\n";
		content = content + "					}\n";
		content = content + "				};\n";
		content = content + "				tableEditor.getEditor().addFocusListener(focusListener);\n";
		content = content + "				break;\n";
		content = content + "			case EditConstant.COMBO:\n";
		content = content + "			case EditConstant.CCOMBO:\n";
		content = content + "			case EditConstant.DATE_TIME:\n";
		content = content + "			case EditConstant.BCOMBO_SINGLE:\n";
		content = content + "				BCombo bcombo_single = (BCombo) createEditor(editor);\n";
		content = content + "				tableEditor.setEditor(bcombo_single, table.getItem(row), 1);\n";
		content = content + "				break;\n";
		content = content + "			case EditConstant.UNIT_EDIT:\n";
		content = content + "				BCombo edit_combo = (BCombo) createEditor(editor);\n";
		content = content + "				tableEditor.setEditor(edit_combo, table.getItem(row), 1);\n";
		content = content + "				break;\n";
		content = content + "			case EditConstant.QUERY:\n";
		content = content + "				BCombo query_combo = (BCombo) createEditor(editor);\n";
		content = content + "				tableEditor.setEditor(query_combo, table.getItem(row), 1);\n";
		content = content + "				break;\n";
		content = content + "			default:\n";
		content = content + "				break;\n";
		content = content + "			}\n";
		content = content + "			row++;\n";
		content = content + "		}\n";
		content = content + "		table.setRedraw(true);\n";
		content = content + "	}\n";
		content = content + "	private UnitEditor getEditorFromDescription(String description) {\n";
		content = content + "		for (UnitEditor editor : meta.EDITOR) {\n";
		content = content + "			if (editor.getField().getDescription().equals(description)) {\n";
		content = content + "				return editor;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		return null;\n";
		content = content + "	}\n";
		content = content + "	private void editorWidth() {\n";
		content = content + "		// TODO pass label column width then ->\n";
		content = content + "		// editorColumn.setWidth(container.getBounds().width-lColumnWidth-10);\n";
		content = content + "		editorColumn.setWidth(container.getBounds().width - 130);\n";
		content = content + "	}\n";
		content = content + "	private void createLabelColumn() {\n";
		content = content + "		ColumnTool Ctool = new ColumnTool(viewer);\n";
		content = content + "		TableViewerColumn column = Ctool.createTableViewerColumn(Labels, labelWidth);\n";
		content = content + "		column.setLabelProvider(new ColumnLabelProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public Font getFont(Object element) {\n";
		content = content + "				return SWTResourceManager.getFont(Segoe UI, 9, SWT.BOLD);\n";
		content = content + "			}\n";
		content = content + "			@Override\n";
		content = content + "			public Color getForeground(Object element) {\n";
		content = content + "				return SWTResourceManager.getColor(SWT.COLOR_WIDGET_BORDER);\n";
		content = content + "			}\n";
		content = content + "			@Override\n";
		content = content + "			public String getText(Object element) {\n";
		content = content + "				return ((UnitEditor) element).getField().getDescription() +  :;\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	protected void checkSubclass() {\n";
		content = content + "		// Disable the check that prevents subclassing of SWT components\n";
		content = content + "	}\n";
		content = content + "	public List<UnitEditor> getEditData() {\n";
		content = content + "		return editorData;\n";
		content = content + "	}\n";
		content = content + "	public void setEditData(List<UnitEditor> editData) {\n";
		content = content + "		firePropertyChange(editData, this.editorData, this.editorData = editData);\n";
		content = content + "	}\n";
		content = content + "	public " + unit.NAME + "Model getEditModel() {\n";
		content = content + "		return editModel;\n";
		content = content + "	}\n";
		content = content + "	public void setEditModel(" + unit.NAME + "Model editModel) {\n";
		content = content + "		firePropertyChange(editModel, this.editModel, this.editModel = editModel);\n";
		content = content + "	}\n";
		content = content + "	public void addPropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, oldValue, newValue);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object value) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, value, null);\n";
		content = content + "	}\n";
		content = content + "}\n";
		content = content + "class " + unit.NAME + "EditFilter extends ViewerFilter {\n";
		content = content + "	private String searchString;\n";
		content = content + "	public void setSearchText(String s) {\n";
		content = content + "		this.searchString = .* + s + .*;\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public boolean select(Viewer viewer, Object parentElement, Object element) {\n";
		content = content + "		if (searchString == null || searchString.length() == 0) {\n";
		content = content + "			return true;\n";
		content = content + "		}\n";
		content = content + "		UnitEditor entry = (UnitEditor) element;\n";
		content = content + "		if (entry.getField().getName().toLowerCase().matches(searchString.toLowerCase())) {\n";
		content = content + "			return true;\n";
		content = content + "		}\n";
		content = content + "		return false;\n";
		content = content + "	}\n";
		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :) + v);\n";
		content = content + "	}\n";
		content = content + "}\n";
		content = content + "class " + unit.NAME + "EditComparator extends ViewerComparator {\n";
		content = content + "	private int propertyIndex;\n";
		content = content + "	private static final int DESCENDING = 1;\n";
		content = content + "	private int direction = DESCENDING;\n";
		content = content + "	public " + unit.NAME + "EditComparator() {\n";
		content = content + "		this.propertyIndex = 0;\n";
		content = content + "		direction = DESCENDING;\n";
		content = content + "	}\n";
		content = content + "	public int getDirection() {\n";
		content = content + "		return direction == 1 ? SWT.DOWN : SWT.UP;\n";
		content = content + "	}\n";
		content = content + "	public void setColumn(int column) {\n";
		content = content + "		if (column == this.propertyIndex) {\n";
		content = content + "			direction = 1 - direction;\n";
		content = content + "		} else {\n";
		content = content + "			this.propertyIndex = column;\n";
		content = content + "			direction = DESCENDING;\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public int compare(Viewer viewer, Object e1, Object e2) {\n";
		content = content + "		UnitEditor entry01 = (UnitEditor) e1;\n";
		content = content + "		UnitEditor entry02 = (UnitEditor) e2;\n";
		content = content + "		int rc = 0;\n";
		content = content + "		switch (propertyIndex) {\n";
		content = content + "		case 0:\n";
		content = content + "			rc = entry01.getField().getName().compareTo(entry02.getField().getName());\n";
		content = content + "			break;\n";
		content = content + "		default:\n";
		content = content + "			rc = 0;\n";
		content = content + "		}\n";
		content = content + "		if (direction == DESCENDING) {\n";
		content = content + "			rc = -rc;\n";
		content = content + "		}\n";
		content = content + "		return rc;\n";
		content = content + "	}\n";
		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :)  + v);\n";
		content = content + "	}\n";
		content = content + "}\n";


		createFile();		

	}

}

//KEEP?
//content = content + "		table.addListener(SWT.EraseItem, new Listener() {\n";**
//content = content + "			public void handleEvent(Event event) {\n";
//content = content + "				event.detail &= ~SWT.HOT;\n";
//content = content + "				if ((event.detail & SWT.SELECTED) == 0)\n";
//content = content + "					return; // / item not selected\n";
//content = content + "				GC gc = event.gc;\n";
//content = content + "				Color oldForeground = gc.getForeground();\n";
//content = content + "				Color oldBackground = gc.getBackground();\n";
//content = content + "				gc.setForeground(oldForeground);\n";
//content = content + "				gc.setBackground(oldBackground);\n";
//content = content + "				event.detail &= ~SWT.SELECTED;\n";
//content = content + "			}\n";
//content = content + "		});\n";

