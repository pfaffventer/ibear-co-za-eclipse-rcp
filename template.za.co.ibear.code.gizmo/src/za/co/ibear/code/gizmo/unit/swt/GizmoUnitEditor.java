package za.co.ibear.code.gizmo.unit.swt;

import za.co.ibear.code.data.dictionary.system.field.Field;
import za.co.ibear.code.data.dictionary.system.unit.Unit;
import za.co.ibear.code.gizmo.GizmoUnit;

public class GizmoUnitEditor extends GizmoUnit {

	public GizmoUnitEditor(Unit unit) throws Exception {
		super(unit,unit.NAME + "Editor",unit.NAME + "Model",GizmoUnitEditorConstant.PACKAGE_PREFIX,GizmoUnitEditorConstant.PATH_PREFIX);
		new GizmoUnitLabelProvider(unit);
		new GizmoUnitComparator(unit);
		if(!unit.IS_ELEMENT) {
			new GizmoUnitBrowser(unit);
		}
		new GizmoUnitEdit(unit);

		/**
		 * Check for hard coded strings e.g. search and replace (P)(p)roduct.
		 * 
		 * " + unit.NAME.toLowerCase() + "
		 * " + unit.NAME + "
		 *  
		 */

		content = content + "import java.beans.PropertyChangeEvent;\n";
		content = content + "import java.beans.PropertyChangeListener;\n";
		content = content + "import java.beans.PropertyChangeSupport;\n";
		content = content + "import java.util.ArrayList;\n";
		content = content + "import java.util.HashSet;\n";
		content = content + "import java.util.LinkedHashSet;\n";
		content = content + "import java.util.Set;\n";
		content = content + "import java.lang.reflect.Method;\n";
		content = content + "import java.util.List;\n";

		content = content + "import org.eclipse.swt.widgets.Text;\n";
		content = content + "import org.eclipse.core.databinding.observable.list.WritableList;\n";
		content = content + "import org.eclipse.core.runtime.IProgressMonitor;\n";
		content = content + "import org.eclipse.core.runtime.IStatus;\n";
		content = content + "import org.eclipse.core.runtime.Status;\n";
		content = content + "import org.eclipse.core.runtime.jobs.IJobChangeEvent;\n";
		content = content + "import org.eclipse.core.runtime.jobs.IJobManager;\n";
		content = content + "import org.eclipse.core.runtime.jobs.Job;\n";
		content = content + "import org.eclipse.core.runtime.jobs.JobChangeAdapter;\n";
		content = content + "import org.eclipse.core.runtime.jobs.ProgressProvider;\n";
		content = content + "import org.eclipse.jface.action.Action;\n";
		content = content + "import org.eclipse.jface.action.IAction;\n";
		content = content + "import org.eclipse.jface.action.MenuManager;\n";
		content = content + "import org.eclipse.swt.events.SelectionAdapter;\n";
		content = content + "import org.eclipse.swt.events.SelectionEvent;\n";
		content = content + "import org.eclipse.jface.databinding.viewers.ObservableListContentProvider;\n";
		content = content + "import org.eclipse.jface.dialogs.MessageDialog;\n";
		content = content + "import org.eclipse.jface.viewers.ISelectionChangedListener;\n";
		content = content + "import org.eclipse.jface.viewers.IStructuredSelection;\n";
		content = content + "import org.eclipse.jface.viewers.SelectionChangedEvent;\n";
		content = content + "import org.eclipse.jface.viewers.TableViewer;\n";
		content = content + "import org.eclipse.swt.SWT;\n";
		content = content + "import org.eclipse.swt.custom.SashForm;\n";
		content = content + "import org.eclipse.swt.custom.TableEditor;\n";
		content = content + "import org.eclipse.swt.layout.FillLayout;\n";
		content = content + "import org.eclipse.swt.layout.GridData;\n";
		content = content + "import org.eclipse.swt.layout.GridLayout;\n";
		content = content + "import org.eclipse.swt.widgets.Composite;\n";
		content = content + "import org.eclipse.swt.widgets.Display;\n";
		content = content + "import org.eclipse.swt.widgets.Event;\n";
		content = content + "import org.eclipse.swt.widgets.Listener;\n";
		content = content + "import org.eclipse.swt.widgets.Menu;\n";
		content = content + "import org.eclipse.swt.widgets.ProgressBar;\n";
		content = content + "import org.eclipse.swt.widgets.Table;\n";
		content = content + "import org.eclipse.swt.widgets.TableColumn;\n";
		content = content + "import org.eclipse.swt.widgets.TableItem;\n";

		content = content + "import za.co.ibear.data.unit." + unit.NAME.toLowerCase() + "." + unit.NAME + "Link;\n";
		content = content + "import za.co.ibear.data.unit." + unit.NAME.toLowerCase() + "." + unit.NAME + "Model;\n";
		content = content + "import za.co.ibear.data.unit." + unit.NAME.toLowerCase() + "." + unit.NAME + "Transaction;\n";

		if(unit.QUERY!=null) {
			content = content + "import za.co.ibear.data.unit." + unit.QUERY.toLowerCase() + "." + unit.QUERY + "Model;\n";
		}
		
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseDialog;\n";
		content = content + "import za.co.ibear.code.data.dictionary.definition.unit." + unit.NAME + ";\n";
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseCombo;\n";
		content = content + "import za.co.ibear.swt.control.combo.BCombo;\n";
		content = content + "import za.co.ibear.swt.control.combo.BComboConstant;\n";
		content = content + "import za.co.ibear.data.unit.swt.edit.UnitEditComposite;\n";

		content = content + "import org.eclipse.swt.widgets.Button;\n";
		content = content + "import org.eclipse.swt.events.DisposeEvent;\n";
		content = content + "import org.eclipse.swt.events.DisposeListener;\n";
		content = content + "import org.eclipse.swt.events.KeyAdapter;\n";
		content = content + "import org.eclipse.swt.events.KeyEvent;\n";
		content = content + "import org.eclipse.swt.events.MouseAdapter;\n";
		content = content + "import org.eclipse.swt.events.MouseEvent;\n";
		content = content + "import org.eclipse.swt.graphics.Image;\n";
		content = content + "import org.eclipse.wb.swt.SWTResourceManager;\n";
		content = content + "import org.eclipse.wb.swt.ResourceManager;\n";
		content = content + "public class " + unit.NAME + "Editor extends UnitEditComposite implements IProgressMonitor {\n";
		content = content + "	private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);\n";
		content = content + "	private Composite parent;\n";
		content = content + "	private Composite composite;\n";
		content = content + "	private SashForm sash;\n";
		content = content + "	private Composite dataComposite;\n";
		content = content + "	private TableViewer dataViewer;\n";
		content = content + "	private Table dataTable;\n";
		content = content + "	private " + unit.NAME + "Model selected;\n";
		content = content + "	private Composite filterComposite;\n";
		content = content + "	private TableViewer filterViewer;\n";
		content = content + "	private Table filterTable;\n";
		content = content + "	private Composite editorComposite;\n";
		content = content + "	private ProgressBar progress;\n";
		content = content + "	private " + unit.NAME + "Link data = new " + unit.NAME + "Link();\n";
		content = content + "	final Set<BCombo> multiSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	final Set<BCombo> unitSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	final Set<BCombo> querySet = new LinkedHashSet<BCombo>();\n";
		content = content + "	final Set<BCombo> dateSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	private " + unit.NAME + "Edit " + unit.NAME.toLowerCase() + "Edit;\n";
		content = content + "	private " + unit.NAME + " meta = new " + unit.NAME + "();\n";
		content = content + "	protected boolean SHELL_PARENT = false;\n";
		content = content + "	private Set<" + unit.NAME + "Transaction> connectionSet = new HashSet<" + unit.NAME + "Transaction>();\n";
		content = content + "	private IStructuredSelection selection;\n";
		content = content + "	private Image clearIcon = ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/context-clear.gif);\n";
		content = content + "	private int headerSequence;\n";
		content = content + "	@SuppressWarnings({ rawtypes })\n";
		content = content + "	private List addSelection;\n";
		content = content + "	private Text search;\n";
		content = content + "	private " + unit.NAME + "Comparator comparator = null;\n";
		content = content + "	private String queryColumn = null;\n";
		content = content + "	private List<String> queryItems = null;\n";
		content = content + "	\n";
		content = content + "	public " + unit.NAME + "Editor(final Composite parent, int style, int[] editorWeights,int labelWidth) throws Exception  {\n";
		content = content + "		super(parent, style);\n";
		content = content + "		this.parent = parent;\n";
		content = content + "		if(parent.getParent().getParent().getClass().getSimpleName().equals(Shell)) {\n";
		content = content + "			SHELL_PARENT = true;\n";
		content = content + "		}\n";
		content = content + "		this.addDisposeListener(new DisposeListener() {\n";
		content = content + "			public void widgetDisposed(DisposeEvent e) {\n";
		content = content + "				if(connectionSet.size()>0) {\n";
		content = content + "					try {\n";
		content = content + "						connectionSet.iterator().next().commit();\n";
		content = content + "					} catch (Exception e1) {\n";
		content = content + "						MessageDialog.openError(parent.getShell(), Filter Error,e1.getMessage());\n";
		content = content + "						e1.printStackTrace();\n";
		content = content + "					}\n";
		content = content + "					connectionSet.iterator().next().disconnect();\n";
		content = content + "					connectionSet.remove(connectionSet.iterator().next());\n";
		content = content + "				}\n";
		content = content + "				data.disconnect();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		GridLayout gl_this = new GridLayout(1, false);\n";
		content = content + "		gl_this.marginRight = 3;\n";
		content = content + "		gl_this.marginBottom = 3;\n";
		content = content + "		gl_this.marginLeft = 3;\n";
		content = content + "		gl_this.verticalSpacing = 0;\n";
		content = content + "		gl_this.marginWidth = 0;\n";
		content = content + "		gl_this.marginHeight = 0;\n";
		content = content + "		gl_this.horizontalSpacing = 0;\n";
		content = content + "		setLayout(gl_this);\n";
		content = content + "		composite = new Composite(this, SWT.NONE);\n";
		content = content + "		composite.setLayout(new FillLayout(SWT.HORIZONTAL));\n";
		content = content + "		composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		sash = new SashForm(composite, SWT.NONE);\n";
		content = content + "		data = new " + unit.NAME + "Link();\n";
		content = content + "		if(!meta.IS_ELEMENT) {\n";
		content = content + "			data.to" + unit.NAME + "ModelList(null);\n";
		content = content + "		}\n";
		content = content + "		filterComposite = new Composite(sash, SWT.NONE);\n";
		content = content + "		GridLayout gl_filterBottom = new GridLayout(1, false);\n";
		content = content + "		gl_filterBottom.marginTop = 3;\n";
		content = content + "		gl_filterBottom.marginHeight = 0;\n";
		content = content + "		gl_filterBottom.verticalSpacing = 0;\n";
		content = content + "		gl_filterBottom.marginWidth = 0;\n";
		content = content + "		gl_filterBottom.horizontalSpacing = 0;\n";
		content = content + "		filterComposite.setLayout(gl_filterBottom);\n";
		content = content + "		filterViewer = new TableViewer(filterComposite, SWT.FULL_SELECTION);\n";
		content = content + "		filterTable = filterViewer.getTable();\n";
		content = content + "		filterTable.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));\n";
		content = content + "		filterTable.setLinesVisible(true);\n";
		content = content + "		filterTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		final TableColumn column = new TableColumn(filterTable, SWT.NONE);\n";
		content = content + "		filterComposite.addListener(SWT.Resize, new Listener() {\n";
		content = content + "			public void handleEvent(Event event) {\n";
		content = content + "				column.setWidth(filterComposite.getBounds().width-5);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		TableEditor editor;\n";
		content = content + "		if(SHELL_PARENT) {\n";
		content = content + "			TableItem itemExit = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "			editor = new TableEditor(filterTable);\n";
		content = content + "			editor.grabHorizontal = true;\n";
		content = content + "			editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "			Button exit = new Button(filterTable, SWT.PUSH);\n";
		content = content + "			exit.setText( Exit );\n";
		content = content + "			exit.setToolTipText(Exit window without selection);\n";
		content = content + "			exit.setImage(ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/cross.png));\n";
		content = content + "			editor.setEditor(exit,itemExit,0);\n";
		content = content + "			exit.addMouseListener(new MouseAdapter() {\n";
		content = content + "				@Override\n";
		content = content + "				public void mouseDown(MouseEvent e) {\n";
		content = content + "					firePropertyChange(exit, OPEN,EXIT);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "			TableItem itemClose = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "			editor = new TableEditor(filterTable);\n";
		content = content + "			editor.grabHorizontal = true;\n";
		content = content + "			editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "			Button close = new Button(filterTable, SWT.PUSH);\n";
		content = content + "			close.setText( Close );\n";
		content = content + "			close.setToolTipText(Close window);\n";
		content = content + "			close.setImage(ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/tick.png));\n";
		content = content + "			editor.setEditor(close,itemClose,0);\n";
		content = content + "			close.addMouseListener(new MouseAdapter() {\n";
		content = content + "				@Override\n";
		content = content + "				public void mouseDown(MouseEvent e) {\n";
		content = content + "					firePropertyChange(close, OPEN,CLOSE);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "		}\n";
		content = content + "		TableItem itemReset = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "		editor = new TableEditor(filterTable);\n";
		content = content + "		editor.grabHorizontal = true;\n";
		content = content + "		editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "		Button reset = new Button(filterTable, SWT.PUSH);\n";
		content = content + "		reset.setText( Reset );\n";
		content = content + "		reset.setToolTipText(Reset all filters);\n";
		content = content + "		reset.setImage(clearIcon);\n";
		content = content + "		editor.setEditor(reset,itemReset,0);\n";
		content = content + "		reset.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDown(MouseEvent e) {\n";
		content = content + "				queryItems = new ArrayList<String>();\n";
		content = content + "				reset();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		TableItem itemSearch = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "		editor = new TableEditor(filterTable);\n";
		content = content + "		editor.grabHorizontal = true;\n";
		content = content + "		editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "		search = new Text(filterTable, SWT.SEARCH | SWT.ICON_SEARCH | SWT.CANCEL | SWT.BORDER);\n";
		content = content + "		search.setToolTipText(Type filter text and press <Enter>);\n";
		content = content + "		search.setMessage(Search);\n";
		content = content + "		search.addKeyListener(new KeyAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void keyPressed(KeyEvent e) {\n";
		content = content + "				if(e.keyCode==SWT.CR||e.keyCode==SWT.KEYPAD_CR) {\n";
		content = content + "					search(search.getText());\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		editor.setEditor(search,itemSearch,0);\n";
		content = content + "		TableItem filterItem = null;\n";
		content = content + "		BCombo filter = null;\n";
		content = content + "		for(String bcombo_meta:meta.BCOMBO) {\n";
		content = content + "			String bcombo = bcombo_meta.split(>>)[0];\n";
		content = content + "			int type = Integer.valueOf(bcombo_meta.split(>>)[1]);\n";

		if(unit.QUERY!=null) {
			content = content + "			if(type==BComboConstant.QUERY) {\n";
			content = content + "				queryColumn = bcombo;\n";
			content = content + "				String queryName = bcombo_meta.split(>>)[2];\n";
			content = content + "				String queryDescription = bcombo_meta.split(>>)[3];\n";
			content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
			content = content + "				editor = new TableEditor(filterTable);\n";
			content = content + "				editor.grabHorizontal = true;\n";
			content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
			content = content + "				filter = new UnitBrowseCombo(filterTable,1850,queryDescription,queryName,false,null,true);\n";
			content = content + "				filter.addPropertyChangeListener(selection_changed,new PropertyChangeListener() {\n";
			content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
			content = content + "						queryItems = new ArrayList<String>();\n";
			content = content + "						@SuppressWarnings(unchecked)\n";
			content = content + "						List<TableItem> selection = (List<TableItem>) e.getNewValue();\n";
			content = content + "						for(TableItem item:selection) {\n";
			content = content + "							queryItems.add(((" + unit.QUERY + "Model) item.getData()).get" + unit.NAME + "());\n";
			content = content + "						}\n";
			content = content + "					}\n";
			content = content + "				});\n";
			content = content + "				filter.addPropertyChangeListener(do-refresh,new PropertyChangeListener() {\n";
			content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
			content = content + "						query();\n";
			content = content + "					}\n";
			content = content + "				});\n";
			content = content + "				editor.setEditor(filter,filterItem,0);\n";
			content = content + "				querySet.add(filter);\n";
			content = content + "			}\n";
		}
		
		content = content + "			if(type==BComboConstant.MULTI) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new BCombo(filterTable,370,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),new ArrayList<String>(data.toDistinctColumnArray(bcombo)),BComboConstant.MULTI);\n";
		content = content + "				filter.addPropertyChangeListener(close,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				multiSet.add(filter);\n";
		content = content + "			}\n";
		content = content + "			if(type==BComboConstant.UNIT_BROWSE) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new UnitBrowseCombo(filterTable,1110,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),false,data.toDistinctColumnArray(meta.getField(bcombo).getName()),false);\n";
		content = content + "				filter.addPropertyChangeListener(select,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				unitSet.add(filter);\n";
		content = content + "			}\n";
		content = content + "			if(type==BComboConstant.DATE) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new BCombo(filterTable, 370,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),null,BComboConstant.DATE);\n";
		content = content + "				filter.addPropertyChangeListener(close,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				dateSet.add(filter);\n";
		content = content + "			}			\n";
		content = content + "		}\n";
		content = content + "		data.setMultiSet(multiSet);\n";
		content = content + "		data.setUnitSet(unitSet);\n";
		content = content + "		data.setQuerySet(querySet);\n";
		content = content + "		data.setDateSet(dateSet);\n";
		content = content + "		for (int i = 0; i < 1; i++) {\n";
		content = content + "			filterTable.getColumn(i).pack();\n";
		content = content + "		}\n";
		content = content + "		filterTable.pack();\n";
		content = content + "		try {\n";
		content = content + "			Method setItemHeightMethod = filterTable.getClass().getDeclaredMethod(setItemHeight, int.class);\n";
		content = content + "			setItemHeightMethod.setAccessible(true);\n";
		content = content + "			setItemHeightMethod.invoke(filterTable, 27);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "		dataComposite = new Composite(sash, SWT.NONE);\n";
		content = content + "		GridLayout gl_table = new GridLayout(1, false);\n";
		content = content + "		gl_table.marginBottom = 3;\n";
		content = content + "		gl_table.marginTop = 3;\n";
		content = content + "		gl_table.verticalSpacing = 0;\n";
		content = content + "		gl_table.marginWidth = 0;\n";
		content = content + "		gl_table.marginHeight = 0;\n";
		content = content + "		gl_table.horizontalSpacing = 0;\n";
		content = content + "		dataComposite.setLayout(gl_table);\n";
		content = content + "		dataViewer = new TableViewer(dataComposite, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI  | SWT.VIRTUAL);\n";
		content = content + "		setTable(dataViewer.getTable());\n";
		content = content + "		dataViewer.addSelectionChangedListener(new ISelectionChangedListener() {\n";
		content = content + "			@Override\n";
		content = content + "			public void selectionChanged(SelectionChangedEvent event) {\n";
		content = content + "				selection = (IStructuredSelection)	dataViewer.getSelection();\n";
		content = content + "				setSelected((" + unit.NAME + "Model) selection.getFirstElement());\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		dataTable.addKeyListener(new KeyAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void keyPressed(KeyEvent e) {\n";
		content = content + "				if(e.keyCode==127) {\n";
		content = content + "					deleteRecord();\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			@Override\n";
		content = content + "			public void keyReleased(KeyEvent e) {\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		dataTable.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDoubleClick(MouseEvent e) {\n";
		content = content + "				firePropertyChange(close, OPEN,CLOSE);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		dataTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		ObservableListContentProvider contentProvider = new ObservableListContentProvider();\n";
		content = content + "		dataViewer.setContentProvider(contentProvider);\n";
		content = content + "		dataViewer.setLabelProvider(new " + unit.NAME + "LabelProvider());\n";

		for(Field field:unit.VISIBLE_COLUMN) {
			String align = "SWT.LEFT";
			if(typeMap.mapType(field.getAnsiDbType()).equals("String")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("Date")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("float")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("int")) {
				align = "SWT.RIGHT";
			}
			content = content + "		new TableColumn(dataTable, " + align + ").setText(" + field.getDescription() + ");\n";
		}

		content = content + "		\n";

		content = content + "		for (int i = 0, n = dataTable.getColumnCount(); i < n; i++) {\n";
		content = content + "			dataTable.getColumn(i).pack();\n";
		content = content + "		}\n";

		content = content + "		comparator = new " + unit.NAME + "Comparator();\n";
		
		int column_count = 0;
		for(@SuppressWarnings("unused") Field field:unit.VISIBLE_COLUMN) {
			content = content + "		dataTable.getColumn(" + column_count + ").addSelectionListener(getSelectionAdapter(dataTable.getColumn(" + column_count + "), " + column_count + "));\n";
			column_count++;
		}

		column_count = 0;
		for(Field field:unit.VISIBLE_COLUMN) {
			content = content + "\t\tdataTable.getColumn(" + column_count + ").setWidth(" + field.getProperty("width") + ");\n";
			column_count++;
		}

		content = content + "		dataTable.setLinesVisible(true);\n";
		content = content + "		dataTable.setHeaderVisible(true);\n";
		content = content + "		dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "		editorComposite = new Composite(sash, SWT.NONE);\n";
		content = content + "		editorComposite.setLayout(new FillLayout(SWT.HORIZONTAL));\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Edit = new " + unit.NAME + "Edit(editorComposite, SWT.NONE, labelWidth);\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Edit.addPropertyChangeListener(do-edit,new PropertyChangeListener() {\n";
		content = content + "			public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "				dataTable.setRedraw(false);\n";
		content = content + "				dataTable.setSelection(dataTable.getSelectionIndex());\n";
		content = content + "				if(e.getNewValue().toString().equals(UNIT-SELECTED)) {\n";
		content = content + "					setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "				}\n";
		content = content + "				dataTable.setRedraw(true);\n";
		content = content + "				dataViewer.refresh();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Edit.addPropertyChangeListener(add-record,new PropertyChangeListener() {\n";
		content = content + "			public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "				addRecord();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Edit.addPropertyChangeListener(delete-record,new PropertyChangeListener() {\n";
		content = content + "			public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "				deleteRecord();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		GridLayout gridLayout = (GridLayout) " + unit.NAME.toLowerCase() + "Edit.getLayout();\n";
		content = content + "		gridLayout.marginTop = 3;\n";
		content = content + "		gridLayout.marginLeft = 5;\n";
		content = content + "		gridLayout.marginWidth = 0;\n";
		content = content + "		gridLayout.marginBottom = 3;\n";
		content = content + "		gridLayout.marginHeight = 0;\n";
		content = content + "		sash.setWeights(editorWeights);\n";
		content = content + "		progress = new ProgressBar(this, SWT.NONE);\n";
		content = content + "		GridData gd_progress = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);\n";
		content = content + "		gd_progress.heightHint = 12;\n";
		content = content + "		progress.setLayoutData(gd_progress);\n";
		content = content + "		if(!meta.IS_READ_ONLY) {\n";
		content = content + "			MenuManager popupMenu = new MenuManager();\n";

		content = content + "			IAction resetAction = new ResetAction();\n";
		content = content + "			popupMenu.add(resetAction);\n";

		content = content + "			IAction addAction = new AddRecordAction();\n";
		content = content + "			popupMenu.add(addAction);\n";
		content = content + "			IAction deleteAction = new DeleteRecordAction();\n";
		content = content + "			popupMenu.add(deleteAction);\n";
		content = content + "			Menu menu = popupMenu.createContextMenu(dataTable);\n";
		content = content + "			dataTable.setMenu(menu);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	private SelectionAdapter getSelectionAdapter(final TableColumn column,final int index) {\n";
		content = content + "		SelectionAdapter selectionAdapter = new SelectionAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void widgetSelected(SelectionEvent e) {\n";
		content = content + "				if(dataViewer.getComparator()==null) {\n";
		content = content + "					dataViewer.setComparator(comparator);\n";
		content = content + "				}\n";
		content = content + "				comparator.setColumn(index);\n";
		content = content + "				int dir = comparator.getDirection();\n";
		content = content + "				dataViewer.getTable().setSortDirection(dir);\n";
		content = content + "				dataViewer.getTable().setSortColumn(column);\n";
		content = content + "				dataViewer.refresh();\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		return selectionAdapter;\n";
		content = content + "	}\n";
		content = content + "	private void search(final String text) {\n";
		content = content + "		Job job = new Job(JOB_SEARCH) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing search.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						data.stringSearch(text);\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "//						prime();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not do selection.);\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				} else {\n";
		content = content + "					for(BCombo bcombo:unitSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule(); 	\n";
		content = content + "	}\n";
		content = content + "	public void selectDetail(int headerSequence) {\n";
		content = content + "		this.headerSequence = headerSequence;\n";
		content = content + "		try {\n";
		content = content + "			data.to" + unit.NAME + "ModelList( WHERE \\UnitSequence\\ =  + headerSequence);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		e.printStackTrace();\n";
		content = content + "		}\n";
		content = content + "		dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "		reset();\n";
		content = content + "	}\n";
		content = content + "	private class AddRecordAction extends Action {\n";
		content = content + "		public AddRecordAction() {\n";
		content = content + "			super(Add record);\n";
		content = content + "		}\n";
		content = content + "		public void run() {\n";
		content = content + "			addRecord();\n";
		content = content + "		}\n";
		content = content + "	}\n";

		content = content + "	private class ResetAction extends Action {\n";
		content = content + "		public ResetAction() {\n";
		content = content + "			super(Reset);\n";
		content = content + "		}\n";
		content = content + "		public void run() {\n";
		content = content + "			reset();\n";
		content = content + "		}\n";
		content = content + "	}\n";
		
		content = content + "	private class DeleteRecordAction extends Action {\n";
		content = content + "		public DeleteRecordAction() {\n";
		content = content + "			super(Delete record);\n";
		content = content + "		}\n";
		content = content + "		public void run() {\n";
		content = content + "			deleteRecord();\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	private void reset() {\n";
		
		content = content + "		dataViewer.setComparator(null);\n";
		content = content + "		dataViewer.getTable().setSortColumn(null);\n";
		content = content + "		dataViewer.refresh();\n";

		content = content + "		Job job = new Job(JOB_CLEAR) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing filter.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						try {\n";
		content = content + "							data.doReset();\n";
		content = content + "						} catch (Exception e) {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error,e.getMessage());\n";
		content = content + "							e.printStackTrace();\n";
		content = content + "						}\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "						dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not clear selection.);\n";
		content = content + "				} else {\n";
		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							search.setText();\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "					for(BCombo bcombo:unitSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule();\n";
		content = content + "	}\n";

		if(unit.QUERY!=null) {
			content = content + "	private void query() {\n";
			content = content + "		Job job = new Job(JOB_QUERY) {\n";
			content = content + "			@Override\n";
			content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
			content = content + "				monitor.beginTask(Executing query.,5);\n";
			content = content + "				monitor.worked(2);\n";
			content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
			content = content + "					@Override\n";
			content = content + "					public void run() {\n";
			content = content + "						data.doQuery(queryColumn,queryItems);\n";
			content = content + "						monitor.worked(3);\n";
			content = content + "						dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
			content = content + "						monitor.worked(4);\n";
			content = content + "					}\n";
			content = content + "				});\n";
			content = content + "				monitor.worked(5);\n";
			content = content + "				monitor.done();\n";
			content = content + "				return Status.OK_STATUS;\n";
			content = content + "			}\n";
			content = content + "		};\n";
			content = content + "		IJobManager manager = Job.getJobManager();\n";
			content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
			content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
			content = content + "			@Override\n";
			content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
			content = content + "				return progress;\n";
			content = content + "			}\n";
			content = content + "		};\n";
			content = content + "		manager.setProgressProvider(provider);\n";
			content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
			content = content + "			public void done(IJobChangeEvent event) {\n";
			content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
			content = content + "					@Override\n";
			content = content + "					public void run() {\n";
			content = content + "					}\n";
			content = content + "				});\n";
			content = content + "				if (!event.getResult().isOK()) {\n";
			content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
			content = content + "						@Override\n";
			content = content + "						public void run() {\n";
			content = content + "							MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not run query.);\n";
			content = content + "						}\n";
			content = content + "					});\n";
			content = content + "				} else {\n";
			content = content + "					for(BCombo bcombo:unitSet) {\n";
			content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
			content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
			content = content + "					}\n";
			content = content + "				}\n";
			content = content + "			}\n";
			content = content + "		});\n";
			content = content + "		job.schedule(); 	\n";
			content = content + "	}\n";
		}
		
		content = content + "	private void select() {\n";
		content = content + "		Job job = new Job(JOB_SELECT) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing filter.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						data.doSelect();\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "//						prime();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not do selection.);\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				} else {\n";
		content = content + "					for(BCombo bcombo:unitSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule(); 	\n";
		content = content + "	}\n";

		content = content + "	public List<String> getQueryItems() {\n";
		content = content + "		return queryItems;\n";
		content = content + "	}\n";
		content = content + "	public void setQueryItems(List<String> queryItems) {\n";
		content = content + "		this.queryItems = queryItems;\n";
		content = content + "	}\n";
		content = content + "	public String getQueryColumn() {\n";
		content = content + "		return queryColumn;\n";
		content = content + "	}\n";
		content = content + "	public void setQueryColumn(String queryColumn) {\n";
		content = content + "		this.queryColumn = queryColumn;\n";
		content = content + "	}\n";

		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :) + v);\n";
		content = content + "	}\n";
		content = content + "	public Table getTable() {\n";
		content = content + "		return dataTable;\n";
		content = content + "	}\n";
		content = content + "	public void setTable(Table table) {\n";
		content = content + "		this.dataTable = table;\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	protected void checkSubclass() {\n";
		content = content + "		// Disable the check that prevents subclassing of SWT components\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void beginTask(final String name, final int totalWork) {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				setTaskName(name); \n";
		content = content + "				progress.setMaximum(totalWork);\n";
		content = content + "				progress.setToolTipText(name);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void worked(final int work) {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				progress.setSelection(progress.getSelection() + work);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void done() {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				progress.setMaximum(0);\n";
		content = content + "				progress.setSelection(0);\n";
		content = content + "				setTaskName();\n";
		content = content + "				progress.setToolTipText();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void internalWorked(double work) {\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public boolean isCanceled() {\n";
		content = content + "		return false;\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void setCanceled(boolean value) {\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void setTaskName(String name) {\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void subTask(String name) {\n";
		content = content + "	}\n";

		content = content + "	public Table getDataTable() {\n";
		content = content + "		return dataTable;\n";
		content = content + "	}\n";
		content = content + "	public void setDataTable(Table dataTable) {\n";
		content = content + "		this.dataTable = dataTable;\n";
		content = content + "	}\n";

		content = content + "	public void addPropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object oldValue,	Object newValue) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, oldValue, newValue);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object value) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, value, null);\n";
		content = content + "	}\n";
		content = content + "	public " + unit.NAME + "Model getSelected() {\n";
		content = content + "		return selected;\n";
		content = content + "	}\n";
		content = content + "	private void deleteRecord() {\n";
		content = content + "		if(selection==null) {\n";
		content = content + "			MessageDialog.openError(parent.getShell(), Edit Error,Please select a record to delete.);\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		boolean deleteRecord = MessageDialog.openQuestion(parent.getShell(),Delete Record,Delete the selected record(s)?);\n";
		content = content + "		if(!deleteRecord) {\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		for(Object object:selection.toArray()) {\n";
		content = content + "			" + unit.NAME + "Model " + unit.NAME.toLowerCase() + "Model = (" + unit.NAME + "Model) object;\n";
		content = content + "			if(connectionSet.size()==0) {\n";
		content = content + "				try {\n";
		content = content + "					connectionSet.add(new " + unit.NAME + "Transaction(" + unit.NAME.toLowerCase() + "Model));\n";
		content = content + "					connectionSet.iterator().next().begin();\n";
		content = content + "				} catch (Exception e) {\n";
		content = content + "					MessageDialog.openError(parent.getShell(), Edit Error,e.getMessage());\n";
		content = content + "					return;\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			try {\n";
		content = content + "				connectionSet.iterator().next().delete();\n";
		content = content + "			} catch (Exception e1) {\n";
		content = content + "				MessageDialog.openError(parent.getShell(), Edit Error,e1.getMessage());\n";
		content = content + "				return;\n";
		content = content + "			}\n";
		content = content + "			boolean filtered = false;\n";
		content = content + "			if(data.getFilterData().size()!=0) {\n";
		content = content + "				if(data.getFilterData().size()!=data.getData().size()) {\n";
		content = content + "					filtered = true;\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			if(selection.size()>0) {\n";
		content = content + "				try {\n";

		if(unit.IS_ELEMENT) {
			content = content + "					data.doDeleteElement((" + unit.NAME + "Model) selection.getFirstElement(), filtered);\n";
		} else {
			content = content + "					data.doDelete((" + unit.NAME + "Model) selection.getFirstElement(), filtered);\n";
		}

		content = content + "				} catch (Exception e) {\n";
		content = content + "					MessageDialog.openError(parent.getShell(), Edit Error,e.getMessage());\n";
		content = content + "					return;\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			if(filtered) {\n";
		content = content + "				dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "			} else {\n";
		content = content + "				dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "			}\n";
		content = content + "			if(selection.size()==0) {\n";
		content = content + "				if(dataTable.getItemCount()>0) {\n";
		content = content + "					dataTable.setSelection(dataViewer.getTable().getItemCount()-1);\n";
		content = content + "					setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "				} else {\n";
		content = content + "					" + unit.NAME.toLowerCase() + "Edit.destroyEditors();\n";
		content = content + "					try {\n";
		content = content + "						" + unit.NAME.toLowerCase() + "Edit.createEditors(new " + unit.NAME + "Model(true));\n";
		content = content + "					} catch (Exception e) {\n";
		content = content + "						e.printStackTrace();\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			} else  {\n";
		content = content + "				if(dataTable.getItemCount()>0) {\n";
		content = content + "					dataTable.setSelection(dataTable.getSelectionIndices()[0]);\n";
		content = content + "					setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "				} else {\n";
		content = content + "					" + unit.NAME.toLowerCase() + "Edit.destroyEditors();\n";
		content = content + "					try {\n";
		content = content + "						" + unit.NAME.toLowerCase() + "Edit.createEditors(new " + unit.NAME + "Model(true));\n";
		content = content + "					} catch (Exception e) {\n";
		content = content + "						e.printStackTrace();\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	private void addRecord() {\n";
		content = content + "		try {\n";
		content = content + "			if(dataTable.getItemCount()>0) {\n";
		content = content + "				if(dataTable.getSelectionIndices().length>0) {\n";
		content = content + "					dataTable.setSelection(dataTable.getSelectionIndices()[0]);\n";
		content = content + "					setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			if(meta.IS_ELEMENT) {\n";
		content = content + "				UnitBrowseDialog browseDialog = new UnitBrowseDialog(parent.getShell(),1110,editorComposite,meta.ELEMENT_SELECTOR.getUnit().NAME,false,null);\n";
		content = content + "				browseDialog.addPropertyChangeListener(selection_changed,new PropertyChangeListener() {\n";
		content = content + "					@SuppressWarnings({ unchecked, rawtypes })\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						if(e.getNewValue()!=null) {\n";
		content = content + "							if(e.getNewValue()!=null) {\n";
		content = content + "								addSelection = new ArrayList();\n";
		content = content + "								List<TableItem> selection = ((List<TableItem>) e.getNewValue());\n";
		content = content + "								for(TableItem item:selection) {\n";
		content = content + "									addSelection.add(item.getData());\n";
		content = content + "								}\n";
		content = content + "							}\n";
		content = content + "						}\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				browseDialog.open();\n";
		content = content + "				for(Object selected:addSelection) {\n";
		content = content + "					" + unit.NAME + "Model new" + unit.NAME + " = new " + unit.NAME + "Model();\n";
		content = content + "					new" + unit.NAME + ".setUnitSequence(getHeaderSequence());\n";

		if(unit.IS_ELEMENT) {
			content = content + "			new" + unit.NAME + ".setUnitSequence(getHeaderSequence());\n";
			content = content + "			int next = data.nextElementSequence();\n";
			content = content + "			new" + unit.NAME + ".setElementSequence(next);\n";
		} else {
			content = content + "			int next = data.nextUnitSequence();\n";
			content = content + "			new" + unit.NAME + ".setUnitSequence(next);\n";
		}
		
		content = content + "					Method getProperty;\n";
		content = content + "					Method setProperty;\n";
		content = content + "					for(String columnName:meta.ELEMENT_SELECTOR.getReturnSet()) {\n";
		content = content + "						getProperty = selected.getClass().getDeclaredMethod(get + columnName);\n";
		content = content + "						getProperty.setAccessible(true);\n";
		content = content + "						setProperty = new" + unit.NAME + ".getClass().getDeclaredMethod(set + columnName,String.class);\n";
		content = content + "						setProperty.setAccessible(true);\n";
		content = content + "						setProperty.invoke(new" + unit.NAME + ", getProperty.invoke(selected));\n";
		content = content + "					}\n";
		content = content + "					if(connectionSet.size()==0) {\n";
		content = content + "						connectionSet.add(new " + unit.NAME + "Transaction(new" + unit.NAME + "));\n";
		content = content + "						connectionSet.iterator().next().begin();\n";
		content = content + "					}\n";
		content = content + "					connectionSet.iterator().next().insert(new" + unit.NAME + ");\n";
		content = content + "					boolean filtered = false;\n";
		content = content + "					if(data.getFilterData().size()!=0) {\n";
		content = content + "						if(data.getFilterData().size()!=data.getData().size()) {\n";
		content = content + "							filtered = true;\n";
		content = content + "						}\n";
		content = content + "					}\n";
		content = content + "					data.getData().add(new" + unit.NAME + ");\n";
		content = content + "					dataViewer.setInput(null);\n";
		content = content + "					if(filtered) {\n";
		content = content + "						data.getFilterData().add(new" + unit.NAME + ");\n";
		content = content + "						dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "					} else {\n";
		content = content + "						dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "					}\n";
		content = content + "					dataTable.setSelection(dataTable.getItemCount()-1);\n";
		content = content + "					setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "				}\n";
		content = content + "			} else {\n";
		content = content + "				" + unit.NAME + "Model new" + unit.NAME + " = new " + unit.NAME + "Model();\n";
		content = content + "				new" + unit.NAME + ".setUnitSequence(getHeaderSequence());\n";

		if(unit.IS_ELEMENT) {
			content = content + "			new" + unit.NAME + ".setUnitSequence(getHeaderSequence());\n";
			content = content + "			int next = data.nextElementSequence();\n";
			content = content + "			new" + unit.NAME + ".setElementSequence(next);\n";
		} else {
			content = content + "			int next = data.nextUnitSequence();\n";
			content = content + "			new" + unit.NAME + ".setUnitSequence(next);\n";
		}
		
		content = content + "				if(connectionSet.size()==0) {\n";
		content = content + "					connectionSet.add(new " + unit.NAME + "Transaction(new" + unit.NAME + "));\n";
		content = content + "					connectionSet.iterator().next().begin();\n";
		content = content + "				}\n";
		content = content + "				connectionSet.iterator().next().insert(new" + unit.NAME + ");\n";
		content = content + "				boolean filtered = false;\n";
		content = content + "				if(data.getFilterData().size()!=0) {\n";
		content = content + "					if(data.getFilterData().size()!=data.getData().size()) {\n";
		content = content + "						filtered = true;\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				data.getData().add(new" + unit.NAME + ");\n";
		content = content + "				dataViewer.setInput(null);\n";
		content = content + "				if(filtered) {\n";
		content = content + "					data.getFilterData().add(new" + unit.NAME + ");\n";
		content = content + "					dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "				} else {\n";
		content = content + "					dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "				}\n";
		content = content + "				dataTable.setSelection(dataTable.getItemCount()-1);\n";
		content = content + "				setSelected((" + unit.NAME + "Model) dataTable.getSelection()[0].getData());\n";
		content = content + "			}\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			MessageDialog.openError(parent.getShell(), Insert Error,e.getMessage());\n";
		content = content + "			e.printStackTrace();\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public void refresh() throws Exception {\n";
		content = content + "		data.pop();\n";
		content = content + "		boolean filtered = false;\n";
		content = content + "		if(data.getFilterData().size()!=0) {\n";
		content = content + "			if(data.getFilterData().size()!=data.getData().size()) {\n";
		content = content + "				filtered = true;\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		dataViewer.setInput(null);\n";
		content = content + "		if(filtered) {\n";
		content = content + "			dataViewer.setInput(new WritableList(data.getFilterData(), " + unit.NAME + "Model.class));\n";
		content = content + "		} else {\n";
		content = content + "			dataViewer.setInput(new WritableList(data.getData(), " + unit.NAME + "Model.class));\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	\n";
		content = content + "	public void setSelected(" + unit.NAME + "Model selected) {\n";
		content = content + "		boolean error = false;\n";
		content = content + "		if(selected==null) {\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		try {\n";
		content = content + "			switchTransaction(selected);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			error = true;\n";
		content = content + "			dataTable.setSelection(-1);\n";
		content = content + "		}\n";
		content = content + "		" + unit.NAME.toLowerCase() + "Edit.destroyEditors();\n";
		content = content + "		try {\n";
		content = content + "			if(!error) {\n";
		content = content + "				" + unit.NAME.toLowerCase() + "Edit.createEditors(selected);\n";
		content = content + "			}\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			MessageDialog.openError(parent.getShell(), Select Error,e.getMessage());\n";
		content = content + "			e.printStackTrace();\n";
		content = content + "			return;\n";
		content = content + "		}\n";
		content = content + "		firePropertyChange(selected, null, this.selected = selected);\n";
		content = content + "	}\n";
		content = content + "	public void switchTransaction(" + unit.NAME + "Model unit) throws Exception {\n";
		content = content + "		if(connectionSet.size()>0) {\n";
		content = content + "			connectionSet.iterator().next().commit();\n";
		content = content + "			connectionSet.iterator().next().disconnect();\n";
		content = content + "			connectionSet.remove(connectionSet.iterator().next());\n";
		content = content + "		}\n";
		content = content + "		connectionSet.add(new " + unit.NAME + "Transaction(unit));\n";
		content = content + "		try {\n";
		content = content + "			connectionSet.iterator().next().begin();\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "			connectionSet.iterator().next().disconnect();\n";
		content = content + "			connectionSet.remove(connectionSet.iterator().next());\n";
		content = content + "			MessageDialog.openError(parent.getShell(), Select Error,e.getMessage());\n";
		content = content + "			throw e;\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	public int getHeaderSequence() {\n";
		content = content + "		return headerSequence;\n";
		content = content + "	}\n";
		content = content + "	public void setHeaderSequence(int headerSequence) {\n";
		content = content + "		this.headerSequence = headerSequence;\n";
		content = content + "	}\n";
		content = content + "}\n";
		
		

		createFile();		
	}

}

//content = content + "		dataViewer.setLabelProvider(new " + unit.NAME + "LabelProvider());\n";
//
//for(Field field:unit.VISIBLE_COLUMN) {
//	String align = "SWT.LEFT";
//	if(typeMap.mapType(field.getAnsiDbType()).equals("String")) {
//		align = "SWT.RIGHT";
//	}
//	if(typeMap.mapType(field.getAnsiDbType()).equals("Date")) {
//		align = "SWT.RIGHT";
//	}
//	if(typeMap.mapType(field.getAnsiDbType()).equals("float")) {
//		align = "SWT.RIGHT";
//	}
//	if(typeMap.mapType(field.getAnsiDbType()).equals("int")) {
//		align = "SWT.RIGHT";
//	}
//	content = content + "		new TableColumn(dataTable, " + align + ").setText(" + field.getDescription() + ");\n";
//}
//
//content = content + "		\n";
//
//content = content + "		for (int i = 0, n = dataTable.getColumnCount(); i < n; i++) {\n";
//content = content + "			dataTable.getColumn(i).pack();\n";
//content = content + "		}\n";
//
//int column_count = 0;
//for(Field field:unit.VISIBLE_COLUMN) {
//	content = content + "\t\tdataTable.getColumn(" + column_count + ").setWidth(" + field.getProperty("width") + ");\n";
//	column_count++;
//}
//
//content = content + "		\n";
//content = content + "		dataTable.setLinesVisible(true);\n";		
