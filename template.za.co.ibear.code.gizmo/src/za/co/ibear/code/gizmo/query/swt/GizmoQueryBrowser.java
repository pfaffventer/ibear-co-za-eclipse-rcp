package za.co.ibear.code.gizmo.query.swt;

import za.co.ibear.code.data.dictionary.system.field.Field;
import za.co.ibear.code.data.dictionary.system.query.Query;
import za.co.ibear.code.gizmo.GizmoQuery;
import za.co.ibear.code.gizmo.unit.swt.GizmoUnitEditorConstant;

public class GizmoQueryBrowser extends GizmoQuery {

	public GizmoQueryBrowser(Query query) throws Exception {
		super(query,query.NAME + "Browser",query.NAME + "Model",GizmoUnitEditorConstant.PACKAGE_PREFIX,GizmoUnitEditorConstant.PATH_PREFIX);
		
		/**
		 * Check for hard coded strings e.g. search and replace " + query.NAME + " with return value " + query.NAME + "Category
		 * 
		 * " + query.NAME.toLowerCase() + "
		 * " + query.NAME + "
		 *  
		 */

		new GizmoQueryLabelProvider(query);
		new GizmoQueryComparator(query);

		content = content + "import java.beans.PropertyChangeEvent;\n";

		content = content + "import org.eclipse.swt.widgets.Text;\n";
		content = content + "import org.eclipse.swt.events.KeyEvent;\n";
		content = content + "import org.eclipse.swt.events.KeyAdapter;\n";

		content = content + "import java.beans.PropertyChangeListener;\n";
		content = content + "import java.beans.PropertyChangeSupport;\n";
		content = content + "import java.util.HashSet;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.primary.key.PrimaryKey;\n";
		content = content + "import za.co.ibear.code.data.dictionary.system.field.Field;\n";
		content = content + "import java.util.ArrayList;\n";
		content = content + "import java.util.Arrays;\n";
		content = content + "import java.util.Date;\n";
		content = content + "import java.util.HashMap;\n";
		content = content + "import java.util.LinkedHashSet;\n";
		content = content + "import java.util.List;\n";
		content = content + "import java.util.Map;\n";
		content = content + "import java.util.Set;\n";
		content = content + "import java.util.TreeSet;\n";
		content = content + "import java.lang.reflect.Method;\n";

		content = content + "import org.eclipse.core.runtime.IProgressMonitor;\n";
		content = content + "import org.eclipse.core.runtime.IStatus;\n";
		content = content + "import org.eclipse.core.runtime.Status;\n";
		content = content + "import org.eclipse.core.runtime.jobs.IJobChangeEvent;\n";
		content = content + "import org.eclipse.core.runtime.jobs.IJobManager;\n";
		content = content + "import org.eclipse.core.runtime.jobs.Job;\n";
		content = content + "import org.eclipse.core.runtime.jobs.JobChangeAdapter;\n";
		content = content + "import org.eclipse.core.runtime.jobs.ProgressProvider;\n";
		content = content + "import org.eclipse.jface.dialogs.MessageDialog;\n";
		content = content + "import org.eclipse.jface.viewers.ArrayContentProvider;\n";
		content = content + "import org.eclipse.jface.viewers.TableViewer;\n";
		content = content + "import org.eclipse.swt.SWT;\n";
		content = content + "import org.eclipse.swt.custom.SashForm;\n";
		content = content + "import org.eclipse.swt.custom.TableEditor;\n";
		content = content + "import org.eclipse.swt.layout.FillLayout;\n";
		content = content + "import org.eclipse.swt.layout.GridData;\n";
		content = content + "import org.eclipse.swt.layout.GridLayout;\n";
		content = content + "import org.eclipse.swt.widgets.Composite;\n";
		content = content + "import org.eclipse.swt.widgets.Display;\n";
		content = content + "import org.eclipse.swt.widgets.Event;\n";
		content = content + "import org.eclipse.swt.widgets.Listener;\n";
		content = content + "import org.eclipse.swt.widgets.ProgressBar;\n";
		content = content + "import org.eclipse.swt.widgets.Table;\n";
		content = content + "import org.eclipse.swt.widgets.TableColumn;\n";
		content = content + "import org.eclipse.swt.widgets.TableItem;\n";

		content = content + "import za.co.ibear.code.data.dictionary.definition.query." + query.NAME + ";\n";
		content = content + "import za.co.ibear.data.unit." + query.NAME.toLowerCase() + "." + query.NAME + "Model;\n";
		content = content + "import za.co.ibear.data.unit." + query.NAME.toLowerCase() + "." + query.NAME + "Link;\n";
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseCombo;\n";
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseComposite;\n";
		content = content + "import za.co.ibear.data.unit.swt.browse.UnitBrowseDialogState;\n";
		content = content + "import za.co.ibear.swt.control.combo.BCombo;\n";
		content = content + "import za.co.ibear.swt.control.combo.BComboConstant;\n";
		content = content + "import gk.jfilter.JFilter;\n";
		content = content + "import org.eclipse.swt.widgets.Button;\n";
		content = content + "import org.eclipse.swt.events.DisposeEvent;\n";
		content = content + "import org.eclipse.swt.events.SelectionAdapter;\n";
		content = content + "import org.eclipse.swt.events.DisposeListener;\n";
		content = content + "import org.eclipse.swt.events.FocusEvent;\n";
		content = content + "import org.eclipse.swt.events.FocusListener;\n";
		content = content + "import org.eclipse.swt.events.MouseAdapter;\n";
		content = content + "import org.eclipse.swt.events.MouseEvent;\n";
		content = content + "import org.eclipse.swt.events.SelectionEvent;\n";
		content = content + "import org.eclipse.swt.events.SelectionListener;\n";
		content = content + "import org.eclipse.swt.graphics.Image;\n";
		content = content + "import org.eclipse.wb.swt.SWTResourceManager;\n";
		content = content + "import org.eclipse.wb.swt.ResourceManager;\n";
		content = content + "public class " + query.NAME + "Browser extends UnitBrowseComposite implements IProgressMonitor {\n";
		content = content + "	private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);\n";
		content = content + "	private Composite parent;\n";
		content = content + "	private Composite composite;\n";
		content = content + "	private SashForm sash;\n";
		content = content + "	private Composite dataComposite;\n";
		content = content + "	private TableViewer dataViewer;\n";
		content = content + "	private Table dataTable;\n";
		content = content + "	private " + query.NAME + "Model selected;\n";
		content = content + "	private Composite filterComposite;\n";
		content = content + "	private TableViewer filterViewer;\n";
		content = content + "	private Table filterTable;\n";
		content = content + "	private ProgressBar progress;\n";
		content = content + "	private " + query.NAME + "Link data = new " + query.NAME + "Link();\n";
		content = content + "	final Set<BCombo> multiSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	final Set<BCombo> unitBrowseSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	final Set<BCombo> dateSet = new LinkedHashSet<BCombo>();\n";
		content = content + "	private " + query.NAME + " meta = new " + query.NAME + "();\n";
		content = content + "	protected boolean SHELL_PARENT = false;\n";
		content = content + "	private Image clearIcon = ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/context-clear.gif);\n";
		content = content + "	private TableItem currentItem = null;\n";
		content = content + "	private boolean FIRST_FOCUS = true;\n";
		content = content + "	private boolean SINGLE_SELECT = false;\n";
		content = content + "	private int itemCountBefore = 0;\n";
		content = content + "	private UnitBrowseDialogState savedState = null;\n";
		content = content + "	private Text search;\n";
		content = content + "	private List<String> initFilter = new ArrayList<String>();\n";

		content = content + "	private " + query.NAME + "Comparator comparator = null;\n";

		content = content + "	@SuppressWarnings(unchecked)\n";
		content = content + "	public " + query.NAME + "Browser(final Composite parent, int style,UnitBrowseDialogState state,Map<String,UnitBrowseDialogState> unitBorwseStateMap,final boolean SINGLE_SELECT,List<String> initFilter,Map<String,TreeSet<String>> selection) throws Exception  {\n";
		content = content + "		super(parent, style);\n";
		content = content + "		this.parent = parent;\n";
		content = content + "		this.SINGLE_SELECT = SINGLE_SELECT;\n";
		content = content + "		this.savedState = state;\n";
		content = content + "		this.setInitFilter(initFilter);\n";
		content = content + "		if(parent.getParent().getParent().getClass().getSimpleName().equals(Shell)) {\n";
		content = content + "			SHELL_PARENT = true;\n";
		content = content + "		}\n";
		content = content + "		this.addDisposeListener(new DisposeListener() {\n";
		content = content + "			@SuppressWarnings(rawtypes)\n";
		content = content + "			public void widgetDisposed(DisposeEvent e) {\n";
		content = content + "				data.disconnect();\n";
		content = content + "				UnitBrowseDialogState latestState = new UnitBrowseDialogState();\n";
		content = content + "				latestState.setData(new ArrayList<" + query.NAME + "Model>());\n";
		content = content + "				latestState.getData().addAll(data.getData());\n";
		content = content + "				latestState.setFilterData(new ArrayList<" + query.NAME + "Model>());\n";
		content = content + "				latestState.getFilterData().addAll(data.getFilterData());\n";
		content = content + "				latestState.setSavedSelectionIndex(dataTable.getSelectionIndices());\n";
		content = content + "				Map<String,List<String>> filterData = new HashMap<String,List<String>>();\n";
		content = content + "				Map<String,Set<String>> filterSelection = new HashMap<String,Set<String>>();\n";
		content = content + "				for(BCombo bcombo:multiSet) {\n";
		content = content + "					filterData.put(bcombo.getColumnName(),bcombo.getItems());\n";
		content = content + "					filterSelection.put(bcombo.getColumnName(), bcombo.getSelection());\n";
		content = content + "				}\n";
		content = content + "				latestState.setSavedFilterData(filterData);\n";
		content = content + "				latestState.setSavedFilterSelection(filterSelection);\n";
		content = content + "				Map<String,UnitBrowseDialogState> stateMap = new HashMap<String,UnitBrowseDialogState>();\n";
		content = content + "				for(BCombo bcombo:unitBrowseSet) {\n";
		content = content + "					if(bcombo.getIndicator().getText().trim().equals(#)) {\n";
		content = content + "						stateMap.put(bcombo.getColumnName(), ((UnitBrowseCombo) bcombo).getState());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				firePropertyChange(save_unit_browse_state,null,stateMap);\n";
		content = content + "				Map<String,Map<String,Date>> dateSelection = new HashMap<String,Map<String,Date>>();\n";
		content = content + "				for(BCombo bcombo:dateSet) {\n";
		content = content + "					dateSelection.put(bcombo.getColumnName(), bcombo.getDateSelection());\n";
		content = content + "				}\n";
		content = content + "				latestState.setSavedDateSelection(dateSelection);\n";
		content = content + "				\n";

		content = content + "				Set<" + query.NAME + "Model> selectedModels = new HashSet<" + query.NAME + "Model>(); \n";
		content = content + "				for(TableItem item:dataTable.getSelection()) {\n";
		content = content + "					selectedModels.add((" + query.NAME + "Model) item.getData());\n";
		content = content + "				}\n";
		content = content + "				JFilter<" + query.NAME + "Model> filter = new JFilter<" + query.NAME + "Model>(selectedModels, " + query.NAME + "Model.class);\n";
		content = content + "				Map<String,TreeSet<String>> selection = new HashMap<String,TreeSet<String>>();\n";
		content = content + "				Set<PrimaryKey> keySet = meta.RETURN_KEY;\n";
		content = content + "				for(PrimaryKey pk:keySet) {\n";
		content = content + "					for(Field field:pk.FIELD) {\n";
		content = content + "						String column = field.getName(); \n";
		content = content + "						selection.put(column, (TreeSet<String>) filter.filter({'$not':[{'get + column + ':{'$sw':'?1'}}]}, _iBear_).map(column).out(new TreeSet()));\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				latestState.setSelection(selection);\n";
		
		content = content + "				firePropertyChange(save_state,null,latestState);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		GridLayout gl_this = new GridLayout(1, false);\n";
		content = content + "		gl_this.marginRight = 3;\n";
		content = content + "		gl_this.marginBottom = 3;\n";
		content = content + "		gl_this.marginLeft = 3;\n";
		content = content + "		gl_this.verticalSpacing = 0;\n";
		content = content + "		gl_this.marginWidth = 0;\n";
		content = content + "		gl_this.marginHeight = 0;\n";
		content = content + "		gl_this.horizontalSpacing = 0;\n";
		content = content + "		setLayout(gl_this);\n";
		content = content + "		composite = new Composite(this, SWT.NONE);\n";
		content = content + "		composite.setLayout(new FillLayout(SWT.HORIZONTAL));\n";
		content = content + "		composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		sash = new SashForm(composite, SWT.NONE);\n";
		content = content + "		data = new " + query.NAME + "Link();\n";
		content = content + "		data.to" + query.NAME + "ModelList(null);\n";
		content = content + "		if(getInitFilter()!=null) {\n";
		content = content + "			data.filter(" + query.NAME + "Category,getInitFilter());\n";
		content = content + "		}\n";
		content = content + "		filterComposite = new Composite(sash, SWT.NONE);\n";
		content = content + "		GridLayout gl_filterBottom = new GridLayout(1, false);\n";
		content = content + "		gl_filterBottom.marginTop = 3;\n";
		content = content + "		gl_filterBottom.marginHeight = 0;\n";
		content = content + "		gl_filterBottom.verticalSpacing = 0;\n";
		content = content + "		gl_filterBottom.marginWidth = 0;\n";
		content = content + "		gl_filterBottom.horizontalSpacing = 0;\n";
		content = content + "		filterComposite.setLayout(gl_filterBottom);\n";
		content = content + "		filterViewer = new TableViewer(filterComposite, SWT.FULL_SELECTION);\n";
		content = content + "		filterTable = filterViewer.getTable();\n";
		content = content + "		filterTable.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));\n";
		content = content + "		filterTable.setLinesVisible(true);\n";
		content = content + "		filterTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		final TableColumn column = new TableColumn(filterTable, SWT.NONE);\n";
		content = content + "		filterComposite.addListener(SWT.Resize, new Listener() {\n";
		content = content + "			public void handleEvent(Event event) {\n";
		content = content + "				column.setWidth(filterComposite.getBounds().width-5);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		TableEditor editor;\n";
		content = content + "		if(SHELL_PARENT) {\n";
		content = content + "			editor = new TableEditor(filterTable);\n";
		content = content + "			editor.grabHorizontal = true;\n";
		content = content + "			editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "			TableItem itemClose = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "			editor = new TableEditor(filterTable);\n";
		content = content + "			editor.grabHorizontal = true;\n";
		content = content + "			editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "			Button close = new Button(filterTable, SWT.PUSH);\n";
		content = content + "			close.setText( Close );\n";
		content = content + "			close.setToolTipText(Close window);\n";
		content = content + "			close.setImage(ResourceManager.getPluginImage(za.co.ibear.swt.icons, icons/tick.png));\n";
		content = content + "			editor.setEditor(close,itemClose,0);\n";
		content = content + "			close.addMouseListener(new MouseAdapter() {\n";
		content = content + "				@Override\n";
		content = content + "				public void mouseDown(MouseEvent e) {\n";
		content = content + "					firePropertyChange(close, OPEN,CLOSE);\n";
		content = content + "				}\n";
		content = content + "			});\n";
		content = content + "		}\n";
		content = content + "		TableItem itemReset = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "		editor = new TableEditor(filterTable);\n";
		content = content + "		editor.grabHorizontal = true;\n";
		content = content + "		editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "		Button clear = new Button(filterTable, SWT.PUSH);\n";
		content = content + "		clear.setText( Reset );\n";
		content = content + "		clear.setToolTipText(Reset all filters);\n";
		content = content + "		clear.setImage(clearIcon);\n";
		content = content + "		editor.setEditor(clear,itemReset,0);\n";
		content = content + "		clear.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDown(MouseEvent e) {\n";
		content = content + "				clear();\n";
		content = content + "				dataTable.setSelection(-1);\n";
		content = content + "			}\n";
		content = content + "		});\n";

		content = content + "		TableItem itemSearch = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "		editor = new TableEditor(filterTable);\n";
		content = content + "		editor.grabHorizontal = true;\n";
		content = content + "		editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "		search = new Text(filterTable, SWT.SEARCH | SWT.ICON_SEARCH | SWT.CANCEL | SWT.BORDER);\n";
		content = content + "		search.setToolTipText(Type filter text and press <Enter>);\n";
		content = content + "		search.setMessage(Search);\n";
		content = content + "		search.addKeyListener(new KeyAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void keyPressed(KeyEvent e) {\n";
		content = content + "				if(e.keyCode==SWT.CR||e.keyCode==SWT.KEYPAD_CR) {\n";
		content = content + "					search(search.getText());\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		editor.setEditor(search,itemSearch,0);\n";

		content = content + "		TableItem filterItem = null;\n";
		content = content + "		BCombo filter = null;\n";
		content = content + "		for(String bcombo_meta:meta.BCOMBO) {\n";
		content = content + "			String bcombo = bcombo_meta.split(>>)[0];\n";
		content = content + "			int type = Integer.valueOf(bcombo_meta.split(>>)[1]);\n";
		content = content + "			if(type==BComboConstant.MULTI) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new BCombo(filterTable,370,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),new ArrayList<String>(data.toDistinctColumnArray(bcombo)),BComboConstant.MULTI);\n";
		content = content + "				filter.addPropertyChangeListener(close,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if(this.savedState.getSavedFilterData().get(meta.getField(bcombo).getName())!=null) {\n";
		content = content + "					filter.setItems(this.savedState.getSavedFilterData().get(meta.getField(bcombo).getName()));\n";
		content = content + "				}\n";
		content = content + "				if(this.savedState.getSavedFilterSelection().get(meta.getField(bcombo).getName())!=null) {\n";
		content = content + "					filter.setSelection(this.savedState.getSavedFilterSelection().get(meta.getField(bcombo).getName()));\n";
		content = content + "				}\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				multiSet.add(filter);\n";
		content = content + "			}\n";
		content = content + "			if(type==BComboConstant.UNIT_BROWSE) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new UnitBrowseCombo(filterTable,1110,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),false,data.toDistinctColumnArray(meta.getField(bcombo).getName()),false);\n";
		content = content + "				filter.addPropertyChangeListener(select,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if(unitBorwseStateMap.containsKey(meta.getField(bcombo).getName())) {\n";
		content = content + "					((UnitBrowseCombo) filter).getBrowseDialog().saveState(unitBorwseStateMap.get(meta.getField(bcombo).getName()));\n";
		content = content + "					((UnitBrowseCombo) filter).getIndicator().setText(# );\n";
		content = content + "				}\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				unitBrowseSet.add(filter);\n";
		content = content + "			}\n";
		content = content + "			if(type==BComboConstant.DATE) {\n";
		content = content + "				filterItem = new TableItem(filterTable, SWT.NONE);\n";
		content = content + "				editor = new TableEditor(filterTable);\n";
		content = content + "				editor.grabHorizontal = true;\n";
		content = content + "				editor.horizontalAlignment = SWT.FILL;\n";
		content = content + "				filter = new BCombo(filterTable, 370,meta.getField(bcombo).getDescription(),meta.getField(bcombo).getName(),null,BComboConstant.DATE);\n";
		content = content + "				filter.addPropertyChangeListener(close,new PropertyChangeListener() {\n";
		content = content + "					public void propertyChange(final PropertyChangeEvent e) {\n";
		content = content + "						select();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if(this.savedState.getSavedDateSelection().get(meta.getField(bcombo).getName())!=null) {\n";
		content = content + "					filter.seDatetSelection(this.savedState.getSavedDateSelection().get(meta.getField(bcombo).getName()));\n";
		content = content + "				}\n";
		content = content + "				editor.setEditor(filter,filterItem,0);\n";
		content = content + "				dateSet.add(filter);\n";
		content = content + "			}			\n";
		content = content + "		}\n";
		content = content + "		data.setMultiSet(multiSet);\n";
		content = content + "		data.setUnitSet(unitBrowseSet);\n";
		content = content + "		data.setDateSet(dateSet);\n";
		content = content + "		for (int i = 0; i < 1; i++) {\n";
		content = content + "			filterTable.getColumn(i).pack();\n";
		content = content + "		}\n";
		content = content + "		filterTable.pack();\n";
		content = content + "		try {\n";
		content = content + "			Method setItemHeightMethod = filterTable.getClass().getDeclaredMethod(setItemHeight, int.class);\n";
		content = content + "			setItemHeightMethod.setAccessible(true);\n";
		content = content + "			setItemHeightMethod.invoke(filterTable, 27);\n";
		content = content + "		} catch (Exception e) {\n";
		content = content + "		}\n";
		content = content + "		dataComposite = new Composite(sash, SWT.NONE);\n";
		content = content + "		GridLayout gl_table = new GridLayout(1, false);\n";
		content = content + "		gl_table.marginBottom = 3;\n";
		content = content + "		gl_table.marginTop = 3;\n";
		content = content + "		gl_table.verticalSpacing = 0;\n";
		content = content + "		gl_table.marginWidth = 0;\n";
		content = content + "		gl_table.marginHeight = 0;\n";
		content = content + "		gl_table.horizontalSpacing = 0;\n";
		content = content + "		dataComposite.setLayout(gl_table);\n";
		content = content + "		if(this.SINGLE_SELECT) {\n";
		content = content + "			dataViewer = new TableViewer(dataComposite, SWT.BORDER | SWT.FULL_SELECTION | SWT.VIRTUAL);\n";
		content = content + "		} else {\n";
		content = content + "			dataViewer = new TableViewer(dataComposite, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI | SWT.CHECK | SWT.VIRTUAL);\n";
		content = content + "		}\n";
		content = content + "		setTable(dataViewer.getTable());\n";
		content = content + "		dataTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n";
		content = content + "		dataViewer.setContentProvider(new ArrayContentProvider());\n";

		content = content + "		dataViewer.setLabelProvider(new " + query.NAME + "LabelProvider());\n";

		for(Field field:query.VISIBLE_COLUMN) {
			String align = "SWT.LEFT";
			if(typeMap.mapType(field.getAnsiDbType()).equals("String")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("Date")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("float")) {
				align = "SWT.RIGHT";
			}
			if(typeMap.mapType(field.getAnsiDbType()).equals("int")) {
				align = "SWT.RIGHT";
			}
			content = content + "		new TableColumn(dataTable, " + align + ").setText(" + field.getDescription() + ");\n";
		}

		content = content + "		\n";

		content = content + "		for (int i = 0, n = dataTable.getColumnCount(); i < n; i++) {\n";
		content = content + "			dataTable.getColumn(i).pack();\n";
		content = content + "		}\n";

		content = content + "		comparator = new " + query.NAME + "Comparator();\n";
		content = content + "		dataViewer.setComparator(comparator);\n";

		int column_count = 0;
		for(@SuppressWarnings("unused") Field field:query.VISIBLE_COLUMN) {
			content = content + "		dataTable.getColumn(" + column_count + ").addSelectionListener(getSelectionAdapter(dataTable.getColumn(" + column_count + "), " + column_count + "));\n";
			column_count++;
		}

		column_count = 0;
		for(Field field:query.VISIBLE_COLUMN) {
			content = content + "\t\tdataTable.getColumn(" + column_count + ").setWidth(" + field.getProperty("width") + ");\n";
			column_count++;
		}

		content = content + "		\n";
		content = content + "		dataTable.setLinesVisible(true);\n";
		
		content = content + "		dataTable.setHeaderVisible(true);\n";

		content = content + "		boolean SKIP = false;\n";
		content = content + "		if(selection.size()>0) {\n";
		content = content + "			data.doReduceUnitBrowse(selection);\n";
		content = content + "			dataViewer.setInput(data.getFilterData());\n";
		content = content + "			SKIP = true;\n";
		content = content + "		} else {\n";
		content = content + "			data.doExpandUnitBrowse();\n";
		content = content + "			dataViewer.setInput(data.getFilterData());\n";
		content = content + "			SKIP = true;\n";
		content = content + "		}\n";
		content = content + "		if(!SKIP) {\n";
		content = content + "			if(this.savedState.getData().size()>0) {\n";
		content = content + "				data.setFilterData(this.savedState.getFilterData());\n";
		content = content + "				if(data.getFilterData().size()>0) {\n";
		content = content + "					dataViewer.setInput(data.getFilterData());\n";
		content = content + "				} else {\n";
		content = content + "					dataViewer.setInput(data.getData());\n";
		content = content + "				}\n";
		content = content + "			} else {\n";
		content = content + "				dataViewer.setInput(data.getData());\n";
		content = content + "			}\n";
		content = content + "		}\n";
		
		content = content + "		sash.setWeights(new int[] {150, 730});\n";
		content = content + "		progress = new ProgressBar(this, SWT.NONE);\n";
		content = content + "		GridData gd_progress = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);\n";
		content = content + "		gd_progress.heightHint = 12;\n";
		content = content + "		progress.setLayoutData(gd_progress);\n";
		content = content + "		\n";
		content = content + "		dataTable.addFocusListener(new FocusListener() {\n";
		content = content + "			@Override\n";
		content = content + "			public void focusGained(FocusEvent event) {\n";
		content = content + "				if(FIRST_FOCUS) {\n";
		content = content + "					if(!SINGLE_SELECT) {\n";
		content = content + "						resetSelectionIndex(getSavedState().getSavedSelectionIndex());\n";
		content = content + "					} else {\n";
		content = content + "						resetSingleSelectionIndex(getSavedState().getSavedSelectionIndex());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "				FIRST_FOCUS = false;\n";
		content = content + "			}\n";
		content = content + "			@Override\n";
		content = content + "			public void focusLost(FocusEvent e) {\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		dataTable.setFocus();\n";
		content = content + "	}\n";
		
		content = content + "	private SelectionAdapter getSelectionAdapter(final TableColumn column,final int index) {\n";
		content = content + "		SelectionAdapter selectionAdapter = new SelectionAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void widgetSelected(SelectionEvent e) {\n";
		content = content + "				comparator.setColumn(index);\n";
		content = content + "				int dir = comparator.getDirection();\n";
		content = content + "				dataViewer.getTable().setSortDirection(dir);\n";
		content = content + "				dataViewer.getTable().setSortColumn(column);\n";
		content = content + "				dataViewer.refresh();\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		return selectionAdapter;\n";
		content = content + "	}\n";

		content = content + "	private void search(final String text) {\n";
		content = content + "		Job job = new Job(JOB_SEARCH) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing search.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						data.stringSearch(text);\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						dataViewer.setInput(data.getFilterData());\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "//						prime();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not do selection.);\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				} else {\n";
		content = content + "					for(BCombo bcombo:unitBrowseSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule(); 	\n";
		content = content + "	}\n";

		content = content + "	private void selectSingle(boolean doubleClick) {\n";
		content = content + "		firePropertyChange(selection_changed,null,Arrays.asList(dataTable.getSelection()));\n";
		content = content + "		if(doubleClick) {\n";
		content = content + "			firePropertyChange(close, OPEN,CLOSE);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	private void resetSingleSelectionIndex(int[] selectionIndex) {\n";
		content = content + "		if(selectionIndex!=null) {\n";
		content = content + "			if(selectionIndex.length>0) {\n";
		content = content + "				dataTable.setSelection(selectionIndex[0]);\n";
		content = content + "			}\n";
		content = content + "		}		\n";
		content = content + "	}\n";
		content = content + "	private void resetSelectionIndex(int[] selectionIndex) {\n";
		content = content + "		if(selectionIndex!=null) {\n";
		content = content + "			for(int i:selectionIndex) {\n";
		content = content + "				dataTable.getItems()[i].setChecked(true);\n";
		content = content + "			}\n";
		content = content + "			selectCheckedItems(false);\n";
		content = content + "		}\n";
		content = content + "	}\n";
		content = content + "	private void clear() {\n";
		content = content + "		Job job = new Job(JOB_CLEAR) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing filter.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						try {\n";
		content = content + "							data.doReset();\n";
		content = content + "						} catch (Exception e) {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error,e.getMessage());\n";
		content = content + "							e.printStackTrace();\n";
		content = content + "						}\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "						dataViewer.setInput(data.getFilterData());\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not clear selection.);\n";
		content = content + "				} else {\n";

		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							search.setText();\n";
		content = content + "						}\n";
		content = content + "					});\n";

		content = content + "					for(BCombo bcombo:unitBrowseSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";

		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "//							reSetSelectionIndex();\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule();\n";
		content = content + "	}\n";
		content = content + "	private void select() {\n";
		content = content + "		\n";
		content = content + "		itemCountBefore = dataTable.getItemCount();\n";
		content = content + "		\n";
		content = content + "		Job job = new Job(JOB_SELECT) {\n";
		content = content + "			@Override\n";
		content = content + "			protected IStatus run(final IProgressMonitor monitor) {\n";
		content = content + "				monitor.beginTask(Executing filter.,5);\n";
		content = content + "				monitor.worked(2);\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						data.doSelect();\n";
		content = content + "						monitor.worked(3);\n";
		content = content + "						dataViewer.setInput(data.getFilterData());\n";
		content = content + "						monitor.worked(4);\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				monitor.worked(5);\n";
		content = content + "				monitor.done();\n";
		content = content + "				return Status.OK_STATUS;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		IJobManager manager = Job.getJobManager();\n";
		content = content + "		final IProgressMonitor progress = (IProgressMonitor) this;\n";
		content = content + "		ProgressProvider provider = new ProgressProvider() {\n";
		content = content + "			@Override\n";
		content = content + "			public IProgressMonitor createMonitor(Job job) {\n";
		content = content + "				return progress;\n";
		content = content + "			}\n";
		content = content + "		};\n";
		content = content + "		manager.setProgressProvider(provider);\n";
		content = content + "		job.addJobChangeListener(new JobChangeAdapter() {\n";
		content = content + "			public void done(IJobChangeEvent event) {\n";
		content = content + "				Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "					@Override\n";
		content = content + "					public void run() {\n";
		content = content + "						//						prime();\n";
		content = content + "					}\n";
		content = content + "				});\n";
		content = content + "				if (!event.getResult().isOK()) {\n";
		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							MessageDialog.openError(parent.getShell(), Filter Error, Fatal error could not do selection.);\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				} else {\n";
		
		content = content + "					for(BCombo bcombo:unitBrowseSet) {\n";
		content = content + "						UnitBrowseCombo ub = ((UnitBrowseCombo) bcombo);\n";
		content = content + "						ub.getBrowseDialog().setSelection(ub.getBrowseSelection());\n";
		content = content + "					}\n";

		content = content + "					Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "						@Override\n";
		content = content + "						public void run() {\n";
		content = content + "							if(itemCountBefore==dataTable.getItemCount()) {\n";
		content = content + "								for(TableItem i:dataTable.getSelection()) {\n";
		content = content + "									i.setChecked(true);\n";
		content = content + "								}\n";
		content = content + "							} else {\n";
		content = content + "								dataTable.setSelection(-1);\n";
		content = content + "							}\n";
		content = content + "						}\n";
		content = content + "					});\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "		job.schedule(); 	\n";
		content = content + "	}\n";
		content = content + "	public Table getTable() {\n";
		content = content + "		return dataTable;\n";
		content = content + "	}\n";
		content = content + "	public void setTable(Table table) {\n";
		content = content + "		this.dataTable = table;\n";
		content = content + "		dataTable.addSelectionListener(new SelectionListener() {\n";
		content = content + "			@Override\n";
		content = content + "			public void widgetSelected(SelectionEvent event) {\n";
		content = content + "				if(!SINGLE_SELECT) {\n";
		content = content + "					currentItem = (TableItem) event.item;\n";
		content = content + "					selectCheckedItems(false);\n";
		content = content + "				} else {\n";
		content = content + "					selectSingle(false);\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "			@Override\n";
		content = content + "			public void widgetDefaultSelected(SelectionEvent event) {\n";
		content = content + "			}\n";
		content = content + "		}); \n";
		content = content + "		dataTable.addMouseListener(new MouseAdapter() {\n";
		content = content + "			@Override\n";
		content = content + "			public void mouseDoubleClick(MouseEvent e) {\n";
		content = content + "				if(!SINGLE_SELECT) {\n";
		content = content + "					selectCheckedItems(true);\n";
		content = content + "				} else {\n";
		content = content + "					selectSingle(true);\n";
		content = content + "				}\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	private void selectCheckedItems(boolean mouse) {\n";
		content = content + "		if(mouse) {\n";
		content = content + "			if(currentItem.getChecked()) {\n";
		content = content + "				currentItem.setChecked(false);\n";
		content = content + "			} else {\n";
		content = content + "				currentItem.setChecked(true);\n";
		content = content + "			}\n";
		content = content + "		}\n";
		content = content + "		JFilter<TableItem> filter = new JFilter<TableItem>(new ArrayList<TableItem>(Arrays.asList(dataTable.getItems())),TableItem.class);\n";
		content = content + "		List<TableItem> result = filter.filter({'getChecked':{'$eq':'?1'}},true).out(new ArrayList<TableItem>());\n";
		content = content + "		dataTable.setSelection(result.toArray(new TableItem[result.size()]));\n";
		content = content + "		firePropertyChange(selection_changed,null,result);\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	protected void checkSubclass() {\n";
		content = content + "		// Disable the check that prevents subclassing of SWT components\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void beginTask(final String name, final int totalWork) {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				setTaskName(name); \n";
		content = content + "				progress.setMaximum(totalWork);\n";
		content = content + "				progress.setToolTipText(name);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void worked(final int work) {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				progress.setSelection(progress.getSelection() + work);\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void done() {\n";
		content = content + "		Display.getDefault().syncExec(new Runnable() {\n";
		content = content + "			@Override\n";
		content = content + "			public void run() {\n";
		content = content + "				progress.setMaximum(0);\n";
		content = content + "				progress.setSelection(0);\n";
		content = content + "				setTaskName();\n";
		content = content + "				progress.setToolTipText();\n";
		content = content + "			}\n";
		content = content + "		});\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void internalWorked(double work) {\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public boolean isCanceled() {\n";
		content = content + "		return false;\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void setCanceled(boolean value) {\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void setTaskName(String name) {\n";
		content = content + "	}\n";
		content = content + "	public Table getDataTable() {\n";
		content = content + "		return dataTable;\n";
		content = content + "	}\n";
		content = content + "	protected void p(String v) {\n";
		content = content + "		System.out.println(this.getClass().getSimpleName() + :) + v);\n";
		content = content + "	}\n";
		content = content + "	@Override\n";
		content = content + "	public void subTask(String name) {\n";
		content = content + "	}\n";
		content = content + "	public void addPropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(listener);\n";
		content = content + "	}\n";
		content = content + "	public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.addPropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener) {\n";
		content = content + "		changeSupport.removePropertyChangeListener(propertyName, listener);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object oldValue,	Object newValue) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, oldValue, newValue);\n";
		content = content + "	}\n";
		content = content + "	protected void firePropertyChange(String propertyName, Object value) {\n";
		content = content + "		changeSupport.firePropertyChange(propertyName, value, null);\n";
		content = content + "	}\n";
		content = content + "	public " + query.NAME + "Model getSelected() {\n";
		content = content + "		return selected;\n";
		content = content + "	}\n";
		content = content + "	public UnitBrowseDialogState getSavedState() {\n";
		content = content + "		return savedState;\n";
		content = content + "	}\n";
		content = content + "	public void setSavedState(UnitBrowseDialogState savedState) {\n";
		content = content + "		this.savedState = savedState;\n";
		content = content + "	}\n";
		content = content + "	public List<String> getInitFilter() {\n";
		content = content + "		return initFilter;\n";
		content = content + "	}\n";
		content = content + "	public void setInitFilter(List<String> initFilter) {\n";
		content = content + "		this.initFilter = initFilter;\n";
		content = content + "	}\n";
		content = content + "}\n";

		createFile();		
	}
	
}
